{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Language Server Protocol Support for Emacs # homepage \u2022 installation \u2022 languages \u2022 settings \u2022 extensions \u2022 troubleshooting \u2022 screenshots \u2022 FAQ Why? # Community Driven Fully featured - supports all features in Language Server Protocol v3.14. Fast - see performance section . Flexible - choose between full-blown IDE with flashy UI or minimal distraction free. Easy to configure - works out of the box and automatically upgrades if additional packages are present. Overview # Client for Language Server Protocol (v3.14). lsp-mode aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like company , flycheck and projectile . Non-blocking asynchronous calls Real-time Diagnostics/linting via flycheck (recommended) or flymake when Emacs > 26 (requires flymake>=1.0.5) Code completion - company-capf / completion-at-point (note that company-lsp is no longer supported). Hovers - using lsp-ui Code actions - using lsp-execute-code-action or lsp-ui sideline. Code outline - using builtin imenu or helm-imenu Code navigation - using builtin xref , lsp-treemacs tree views or lsp-ui peek functions. Code lens Symbol highlights Formatting Debugger - dap-mode Helm integration - helm-lsp Ivy integration - lsp-ivy Treemacs integration - lsp-treemacs Semantic highlighting as defined by LSP 3.16 (compatible language servers include recent development builds of clangd and rust-analyzer) which-key integration for better discovery Presentations/demos # skybert 's emacsconf presentation (Java) thatwist 's ScalaUA Conference presentation (Scala) See also # lsp-docker - provide docker image with preconfigured language servers with corresponding emacs configuration. company-box - company frontend with icons. dap-mode - Debugger integration for lsp-mode . eglot - An alternative minimal LSP implementation. which-key - Emacs package that displays available keybindings in popup projectile - Project Interaction Library for Emacs Contributions # Contributions are very much welcome. Members # Here it is a list of the current lsp-mode members and what they are primary working on/responsible for. totbwf F# brotzeit Rust dsyzling Scala kurnevsky Scala | Rust seagle0128 Go | Python MS sebastiansturm lsp-mode core | C++ vibhavp lsp-mode core yyoncho lsp-mode core | Java ericdallo Dart | Flutter | docs danielmartin C++ | Swift","title":"Overview"},{"location":"#language-server-protocol-support-for-emacs","text":"homepage \u2022 installation \u2022 languages \u2022 settings \u2022 extensions \u2022 troubleshooting \u2022 screenshots \u2022 FAQ","title":"Language Server Protocol Support for Emacs"},{"location":"#why","text":"Community Driven Fully featured - supports all features in Language Server Protocol v3.14. Fast - see performance section . Flexible - choose between full-blown IDE with flashy UI or minimal distraction free. Easy to configure - works out of the box and automatically upgrades if additional packages are present.","title":"Why?"},{"location":"#overview","text":"Client for Language Server Protocol (v3.14). lsp-mode aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like company , flycheck and projectile . Non-blocking asynchronous calls Real-time Diagnostics/linting via flycheck (recommended) or flymake when Emacs > 26 (requires flymake>=1.0.5) Code completion - company-capf / completion-at-point (note that company-lsp is no longer supported). Hovers - using lsp-ui Code actions - using lsp-execute-code-action or lsp-ui sideline. Code outline - using builtin imenu or helm-imenu Code navigation - using builtin xref , lsp-treemacs tree views or lsp-ui peek functions. Code lens Symbol highlights Formatting Debugger - dap-mode Helm integration - helm-lsp Ivy integration - lsp-ivy Treemacs integration - lsp-treemacs Semantic highlighting as defined by LSP 3.16 (compatible language servers include recent development builds of clangd and rust-analyzer) which-key integration for better discovery","title":"Overview"},{"location":"#presentationsdemos","text":"skybert 's emacsconf presentation (Java) thatwist 's ScalaUA Conference presentation (Scala)","title":"Presentations/demos"},{"location":"#see-also","text":"lsp-docker - provide docker image with preconfigured language servers with corresponding emacs configuration. company-box - company frontend with icons. dap-mode - Debugger integration for lsp-mode . eglot - An alternative minimal LSP implementation. which-key - Emacs package that displays available keybindings in popup projectile - Project Interaction Library for Emacs","title":"See also"},{"location":"#contributions","text":"Contributions are very much welcome.","title":"Contributions"},{"location":"#members","text":"Here it is a list of the current lsp-mode members and what they are primary working on/responsible for. totbwf F# brotzeit Rust dsyzling Scala kurnevsky Scala | Rust seagle0128 Go | Python MS sebastiansturm lsp-mode core | C++ vibhavp lsp-mode core yyoncho lsp-mode core | Java ericdallo Dart | Flutter | docs danielmartin C++ | Swift","title":"Members"},{"location":"page/CHANGELOG/","text":"Changelog # Master branch # Configurable Rust Analyzer inlay face via lsp-rust-analyzer-inlay-face . Add lsp-headerline-breadcrumb-mode which shows a breadcrumb with the document symbols on headerline when enabled. Add lsp-modeline-code-actions-mode which shows code actions on modeline when enabled. Support for Theia-based semantic highlighting has been removed in favor of the semanticTokens protocol specified by LSP 3.16. To enable it, set lsp-enable-semantic-highlighting to t . lsp-metals moved into a separate repo https://github.com/emacs-lsp/lsp-metals Breaking change: use alist instead of hast-tables for lsp-gopls-env and lsp-yaml-schemas . Add lsp-gopls-codelens defcustom to configure codelenses used for golang. Added lsp-diagnose to help users verify their performance related settings Created new website https://emacs-lsp.github.io/lsp-mode/ (thanks to @ericdallo) Implemented special handling of Clangd echo area. Added setting to disable additional text edits ( lsp-completion-enable-additional-text-edit ). Added setting to disable text detail ( lsplsp-completion-show-detail ). Add serenata language server support (thanks to @Sasanidas) Various capf improments - better handling of partial results, support for try-completions, improved resposibility, optimized filtering/sorting, etc. Remove Elixir JakeBecker support (no longer supported) Support semantic tokens protocol (thanks to @sebastiansturm) Improved flycheck integration for better performance. Implemented client side bindings for the protocol. Fixup Ignore timeouts from willSaveWaitUntil Implemented org-mode support (see https://github.com/emacs-lsp/lsp-mode/blob/master/docs/page/lsp-org.md ) Removed support for Theia semantic highlighting protocol Performed serveral fixes to make sure lsp-mode is working fine with Emacs 28 native compilation. Add modeline code actions support (thanks to @ericdallo). Enabled by default, use lsp-modeline-code-actions-enable to disable it. Migrated to github actions from travis. Add breadcrumb on headerline (thanks to @ericdallo). Disabled by default, can be enabled via lsp-headerline-breadcrumb-enable Migrated lsp-mode to use plists(thanks to @yyoncho, @kiennq and @ericdallo). lsp-diagnostics-modeline: perf improvement (thanks to @kiennq) Release 6.3 # Implemented company-capf integration. company-lsp is no longer supported. Dropped support for dart language server in favour of dart SDK(breaking) Added verilog support for LSP using hdl-checker Implemented call hierarchy support (available in lsp-treemacs ) Implemented support for ESLint language server. ocmalmerlin-lsp moved to ocaml-lsp-server(breaking) Added New VHDL language server https://github.com/kraigher/rust_hdl#configuration Add Nim language server integration Implement automatic downloading facilities and implemented auto-download for typescript-language-server , javascript-typescript-stdio and json-language-server . Implement metals decoration protocol Send metals/didFocusTextDocument notification on buffer change Add default keybindings and which-key integration Add support for Dhall language server Implemented debug adapter protocol support for metals Add CMake language server integration Add rust-analyzer runnables support Implemented rust-analyzer inlay hints Support pyenv for pyls Add clang-tidy specific Flycheck error explainer for the lsp checker Improve lsp-mode completion performance by suppressing non completion related features when completion is active. lsp-json: Enable formatter provider Accommodate the new :end-column and :end-column from flycheck Implement status bar for diagnostics lsp-diagnostics-modeline-mode Auto install of the html-language-server Flycheck support for diagnostic tags (3.15 spec). Adding support for GDScript language server used view mode for metals doctor buffer add texlab as tex LSP server Started new set of integration tests without using ecukes Support \"only\" param when requesting code actions Add Perl-LanguageServer support add support robot-framework language server. Implement deferred semantic highlighting Change default transport for erlang ls to stdio dart language server moved into separate repo https://github.com/emacs-lsp/lsp-dart Activate flow language server if there is flow tag in file or .flowconfig in project Add purescript-language-server (#1596) Process the $/progress messages from LSP 3.15 Display the first line of MarkupContent in eldoc (#1607) Perform willSaveWaitUntil synchronously and with shorter timeout Display images when rendering markdown(useful for latex language servers). Increase lsp-idle-delay to 0.5 Support bash language server glob pattern option (#1594) Use pagebreaks for lsp-describe-thing-at-point lsp-mode: Eliminate quadratic-time index-building for imenu. (#1616) Release 6.2 # Support dynamic rename registration Add basic support for style semantic highlighting Added Haxe language server integration Add C#-support via Roslyn. Add emmy lua support Enable plugins in typescript language server. 1079 Provide support for Ada Language server Implement right click support in lsp-mode buffers. Added built-in support for Rust Analyzer . Added support for HDL Checker server to lsp-vhdl Added support for Terraform language server. Added support for R language server (#1182) Added support for passing environment variables to language servers (#1184) Speedup lsp-mode's JSONRPC processing (\\~2 times) Add cancel-token to lsp-request-async Implement unified way to handle recurring lsp features Added support for powershell language server. Implemented inlay hints for Rust Analyzer (thanks to brotzeit ). Implemented automatic installation for C# language server. Reimplemented textDocument/signatureHelp - now the signature is displayed in lv buffer. Cancel sync requests when presssing C-g during the request. Use c-basic-offset when in cc-mode . Add support for Crystal via scry (#1218). Implement textDocument/documentColor support. Release 6.1 # Support for new languages/language servers: # Kotlin Language Server (Thanks to Jon Carr) gopls Language Server for Go XML Language Server (lsp4xml) Hack (using HHVM ) Intelephense for PHP clojure-lsp for Clojure/ClojureScipt (Thanks to Dario Benedek Fazekas) elmLS for Elm (Thanks to Daniel-V) FsAutoComplete for F# (Thanks to Reed Mullanix) Added Erlang support via erlang ls Added Dockerfile support via dockerfile-language-server-nodejs New logging options # lsp-mode now logs to buffer *lsp-log* , instead of *Messages* . This can be controlled with the variable lsp-log-max (Thanks to Thomas Fini Hansen). If lsp-print-performance is non-nil, lsp-mode will log a corresponding performance trace to *lsp-log* for every message to and from the server. The variable lsp-print-io , when non-nil will cause lsp-mode to log all messages to and from the server to a unique *lsp-io* buffer for every project root. These logs can be saved to a file and viewed using the LSP Inspector . LSP Methods # Add support for textDocument/prepareRename . If supported by the language server, all renaming operations will be tested for validity. Add support for file watches . Add support for CodeAction literals . Add API level support for folding ranges . Folding support for origami.el support is implemented by package lsp-origami . Support document links . This can be controlled using the variable lsp-enable-links . Support resource operations (edits sent from the language server can now create/modify/remove files and directories). Add support for workspace/configuration . Add new function lsp-disconnect . Added lsp-find-definition-mouse and bound to C-<down-mouse-1> Added lsp-extend-selection as a frontend of new LSP method textDocument/extendSelection Other changes # Add project logo (thanks to Jon Carr). Created an integration test suite for lsp-mode (See directory features ). If available, using the native JSON API introduced in Emacs 27.1. Tramp implementation now uses TRAMP process instead of TCP sockets (Thanks to Karsten Patzwaldt). LSP autoconfiguration adds company-lsp to the list of company backends instead of overriding it. Add lsp-mode-map . Add menu bar entries for lsp-mode . Perform before save operations ( textDocument/willSaveWaitUntil ) asynchronously. imenu support is now handled asynchronously (Thanks to Dario Gjorgjevski). Added option :none for lsp-prefer-flymake , which disabled both Flymake and Flycheck support. Changed flymake to report the errors immediately after they arrive instead of waiting flymake to call lsp-mode . Add debounce when server does not support incremental updates. Add hook lsp-after-uninitialized-hook , which stores the list of functions called after a language server has been uninitialized. Add variable lsp-symbol-highlighting-skip-current , which lets the user skip the current symbol when a given symbol is being highlighted. Add variable lsp-enabled-clients , which lets users set which defined clients are allowed to be used. Support multiple signatures while displaying eldoc text. Add variable lsp-signature-render-all , which when non-nil forces lsp-mode to only show the current active signature. Expose configuration settings for various language servers. Language servers can now be disabled with the variable lsp-disabled-clients . Improved applying changes speed. Fixed xref support for emacs 27+ Implemented automatic installation for F# language server. Added Emacs 26.x to CI Fixed handling of stderr when running over TRAMP . Implemented support for running the language server in Docker container over local files. Release 6.0 # lsp-mode now have single entry point lsp for all language and based on the major mode starts the corresponding language servers. Added flymake integration. lsp automatically enables and configures company-lsp , lsp-ui , yasnippet , or flymake if they are present so no additional configuration is needed except installing the packages. That behavior could be disabled by setting lsp-auto-configure to nil . lsp-mode ships with several predefined servers located in lsp-clients.el which does not require additional package. For the more complex Language Servers like Eclipse JDT , ccls , cquery and haskell we still require separate package due to relatively high code base. lsp-mode handles automatically server failures by asking the user whether he/she wants to restart the server. introduced new command lsp-describe-session which replaces the existing one lsp-capabilities . The command lists the folders that are part of the workspace and the servers that are associated with the corresponding folder. lsp-mode displays information about the running server and it's status in the modeline. lsp-define-stdio-client and lsp-define-tcp-client are replaced with lsp-register-client lsp rely on projectile or project.el now only for suggesting project root. Once you open new file in a project and start lsp it will provide several options(import project, blacklist project, select other directory root). Once you select a root it will be persisted and used for the next sessions. support for multiple language servers per single file and workspace. changed lsp-mode settings to more sensible defaults. Removed all synchronous calls from the server startup. Improved multi-folder support. added backends for: Bash, C++, CSS, Dart, Elixir, Fortran, Go, Groovy, HTML, Javascript/Typescript, Javascript/Typescript, Ocaml, PHP, Python, Ruby, Rust, Vue, Flow","title":"Changelog"},{"location":"page/CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"page/CHANGELOG/#master-branch","text":"Configurable Rust Analyzer inlay face via lsp-rust-analyzer-inlay-face . Add lsp-headerline-breadcrumb-mode which shows a breadcrumb with the document symbols on headerline when enabled. Add lsp-modeline-code-actions-mode which shows code actions on modeline when enabled. Support for Theia-based semantic highlighting has been removed in favor of the semanticTokens protocol specified by LSP 3.16. To enable it, set lsp-enable-semantic-highlighting to t . lsp-metals moved into a separate repo https://github.com/emacs-lsp/lsp-metals Breaking change: use alist instead of hast-tables for lsp-gopls-env and lsp-yaml-schemas . Add lsp-gopls-codelens defcustom to configure codelenses used for golang. Added lsp-diagnose to help users verify their performance related settings Created new website https://emacs-lsp.github.io/lsp-mode/ (thanks to @ericdallo) Implemented special handling of Clangd echo area. Added setting to disable additional text edits ( lsp-completion-enable-additional-text-edit ). Added setting to disable text detail ( lsplsp-completion-show-detail ). Add serenata language server support (thanks to @Sasanidas) Various capf improments - better handling of partial results, support for try-completions, improved resposibility, optimized filtering/sorting, etc. Remove Elixir JakeBecker support (no longer supported) Support semantic tokens protocol (thanks to @sebastiansturm) Improved flycheck integration for better performance. Implemented client side bindings for the protocol. Fixup Ignore timeouts from willSaveWaitUntil Implemented org-mode support (see https://github.com/emacs-lsp/lsp-mode/blob/master/docs/page/lsp-org.md ) Removed support for Theia semantic highlighting protocol Performed serveral fixes to make sure lsp-mode is working fine with Emacs 28 native compilation. Add modeline code actions support (thanks to @ericdallo). Enabled by default, use lsp-modeline-code-actions-enable to disable it. Migrated to github actions from travis. Add breadcrumb on headerline (thanks to @ericdallo). Disabled by default, can be enabled via lsp-headerline-breadcrumb-enable Migrated lsp-mode to use plists(thanks to @yyoncho, @kiennq and @ericdallo). lsp-diagnostics-modeline: perf improvement (thanks to @kiennq)","title":"Master branch"},{"location":"page/CHANGELOG/#release-63","text":"Implemented company-capf integration. company-lsp is no longer supported. Dropped support for dart language server in favour of dart SDK(breaking) Added verilog support for LSP using hdl-checker Implemented call hierarchy support (available in lsp-treemacs ) Implemented support for ESLint language server. ocmalmerlin-lsp moved to ocaml-lsp-server(breaking) Added New VHDL language server https://github.com/kraigher/rust_hdl#configuration Add Nim language server integration Implement automatic downloading facilities and implemented auto-download for typescript-language-server , javascript-typescript-stdio and json-language-server . Implement metals decoration protocol Send metals/didFocusTextDocument notification on buffer change Add default keybindings and which-key integration Add support for Dhall language server Implemented debug adapter protocol support for metals Add CMake language server integration Add rust-analyzer runnables support Implemented rust-analyzer inlay hints Support pyenv for pyls Add clang-tidy specific Flycheck error explainer for the lsp checker Improve lsp-mode completion performance by suppressing non completion related features when completion is active. lsp-json: Enable formatter provider Accommodate the new :end-column and :end-column from flycheck Implement status bar for diagnostics lsp-diagnostics-modeline-mode Auto install of the html-language-server Flycheck support for diagnostic tags (3.15 spec). Adding support for GDScript language server used view mode for metals doctor buffer add texlab as tex LSP server Started new set of integration tests without using ecukes Support \"only\" param when requesting code actions Add Perl-LanguageServer support add support robot-framework language server. Implement deferred semantic highlighting Change default transport for erlang ls to stdio dart language server moved into separate repo https://github.com/emacs-lsp/lsp-dart Activate flow language server if there is flow tag in file or .flowconfig in project Add purescript-language-server (#1596) Process the $/progress messages from LSP 3.15 Display the first line of MarkupContent in eldoc (#1607) Perform willSaveWaitUntil synchronously and with shorter timeout Display images when rendering markdown(useful for latex language servers). Increase lsp-idle-delay to 0.5 Support bash language server glob pattern option (#1594) Use pagebreaks for lsp-describe-thing-at-point lsp-mode: Eliminate quadratic-time index-building for imenu. (#1616)","title":"Release 6.3"},{"location":"page/CHANGELOG/#release-62","text":"Support dynamic rename registration Add basic support for style semantic highlighting Added Haxe language server integration Add C#-support via Roslyn. Add emmy lua support Enable plugins in typescript language server. 1079 Provide support for Ada Language server Implement right click support in lsp-mode buffers. Added built-in support for Rust Analyzer . Added support for HDL Checker server to lsp-vhdl Added support for Terraform language server. Added support for R language server (#1182) Added support for passing environment variables to language servers (#1184) Speedup lsp-mode's JSONRPC processing (\\~2 times) Add cancel-token to lsp-request-async Implement unified way to handle recurring lsp features Added support for powershell language server. Implemented inlay hints for Rust Analyzer (thanks to brotzeit ). Implemented automatic installation for C# language server. Reimplemented textDocument/signatureHelp - now the signature is displayed in lv buffer. Cancel sync requests when presssing C-g during the request. Use c-basic-offset when in cc-mode . Add support for Crystal via scry (#1218). Implement textDocument/documentColor support.","title":"Release 6.2"},{"location":"page/CHANGELOG/#release-61","text":"","title":"Release 6.1"},{"location":"page/CHANGELOG/#support-for-new-languageslanguage-servers","text":"Kotlin Language Server (Thanks to Jon Carr) gopls Language Server for Go XML Language Server (lsp4xml) Hack (using HHVM ) Intelephense for PHP clojure-lsp for Clojure/ClojureScipt (Thanks to Dario Benedek Fazekas) elmLS for Elm (Thanks to Daniel-V) FsAutoComplete for F# (Thanks to Reed Mullanix) Added Erlang support via erlang ls Added Dockerfile support via dockerfile-language-server-nodejs","title":"Support for new languages/language servers:"},{"location":"page/CHANGELOG/#new-logging-options","text":"lsp-mode now logs to buffer *lsp-log* , instead of *Messages* . This can be controlled with the variable lsp-log-max (Thanks to Thomas Fini Hansen). If lsp-print-performance is non-nil, lsp-mode will log a corresponding performance trace to *lsp-log* for every message to and from the server. The variable lsp-print-io , when non-nil will cause lsp-mode to log all messages to and from the server to a unique *lsp-io* buffer for every project root. These logs can be saved to a file and viewed using the LSP Inspector .","title":"New logging options"},{"location":"page/CHANGELOG/#lsp-methods","text":"Add support for textDocument/prepareRename . If supported by the language server, all renaming operations will be tested for validity. Add support for file watches . Add support for CodeAction literals . Add API level support for folding ranges . Folding support for origami.el support is implemented by package lsp-origami . Support document links . This can be controlled using the variable lsp-enable-links . Support resource operations (edits sent from the language server can now create/modify/remove files and directories). Add support for workspace/configuration . Add new function lsp-disconnect . Added lsp-find-definition-mouse and bound to C-<down-mouse-1> Added lsp-extend-selection as a frontend of new LSP method textDocument/extendSelection","title":"LSP Methods"},{"location":"page/CHANGELOG/#other-changes","text":"Add project logo (thanks to Jon Carr). Created an integration test suite for lsp-mode (See directory features ). If available, using the native JSON API introduced in Emacs 27.1. Tramp implementation now uses TRAMP process instead of TCP sockets (Thanks to Karsten Patzwaldt). LSP autoconfiguration adds company-lsp to the list of company backends instead of overriding it. Add lsp-mode-map . Add menu bar entries for lsp-mode . Perform before save operations ( textDocument/willSaveWaitUntil ) asynchronously. imenu support is now handled asynchronously (Thanks to Dario Gjorgjevski). Added option :none for lsp-prefer-flymake , which disabled both Flymake and Flycheck support. Changed flymake to report the errors immediately after they arrive instead of waiting flymake to call lsp-mode . Add debounce when server does not support incremental updates. Add hook lsp-after-uninitialized-hook , which stores the list of functions called after a language server has been uninitialized. Add variable lsp-symbol-highlighting-skip-current , which lets the user skip the current symbol when a given symbol is being highlighted. Add variable lsp-enabled-clients , which lets users set which defined clients are allowed to be used. Support multiple signatures while displaying eldoc text. Add variable lsp-signature-render-all , which when non-nil forces lsp-mode to only show the current active signature. Expose configuration settings for various language servers. Language servers can now be disabled with the variable lsp-disabled-clients . Improved applying changes speed. Fixed xref support for emacs 27+ Implemented automatic installation for F# language server. Added Emacs 26.x to CI Fixed handling of stderr when running over TRAMP . Implemented support for running the language server in Docker container over local files.","title":"Other changes"},{"location":"page/CHANGELOG/#release-60","text":"lsp-mode now have single entry point lsp for all language and based on the major mode starts the corresponding language servers. Added flymake integration. lsp automatically enables and configures company-lsp , lsp-ui , yasnippet , or flymake if they are present so no additional configuration is needed except installing the packages. That behavior could be disabled by setting lsp-auto-configure to nil . lsp-mode ships with several predefined servers located in lsp-clients.el which does not require additional package. For the more complex Language Servers like Eclipse JDT , ccls , cquery and haskell we still require separate package due to relatively high code base. lsp-mode handles automatically server failures by asking the user whether he/she wants to restart the server. introduced new command lsp-describe-session which replaces the existing one lsp-capabilities . The command lists the folders that are part of the workspace and the servers that are associated with the corresponding folder. lsp-mode displays information about the running server and it's status in the modeline. lsp-define-stdio-client and lsp-define-tcp-client are replaced with lsp-register-client lsp rely on projectile or project.el now only for suggesting project root. Once you open new file in a project and start lsp it will provide several options(import project, blacklist project, select other directory root). Once you select a root it will be persisted and used for the next sessions. support for multiple language servers per single file and workspace. changed lsp-mode settings to more sensible defaults. Removed all synchronous calls from the server startup. Improved multi-folder support. added backends for: Bash, C++, CSS, Dart, Elixir, Fortran, Go, Groovy, HTML, Javascript/Typescript, Javascript/Typescript, Ocaml, PHP, Python, Ruby, Rust, Vue, Flow","title":"Release 6.0"},{"location":"page/adding-new-language/","text":"Adding support for languages # Registering server # Here it is the minimal configuration that is needed for new language server registration. Refer to the documentation of lsp-client.el for the additional settings supported on registration time. lsp-language-id-configuration must be updated to contain the corresponding mode -> language id - in this case (python-mode . \"python\") ( defvar lsp-language-id-configuration ' ( ... ( python-mode . \"python\" ) ... )) ;; if you are adding the support for your language server in separate repo use ;; (add-to-list 'lsp-language-id-configuration '(python-mode . \"python\")) ( lsp-register-client ( make-lsp-client :new-connection ( lsp-stdio-connection \"pyls\" ) :major-modes ' ( python-mode ) :server-id 'pyls )) If the language server supports environment variables to control additional behavior, you can register that by using the :environment-fn function, like the Bash language client does: ( lsp-register-client ( make-lsp-client :new-connection ( lsp-stdio-connection ' ( \"bash-language-server\" \"start\" )) :major-modes ' ( sh-mode ) :priority -1 :environment-fn ( lambda () (( \"EXPLAINSHELL_ENDPOINT\" . lsp-bash-explainshell-endpoint ) ( \"HIGHLIGHT_PARSING_ERRORS\" . lsp-bash-highlight-parsing-errors ))) :server-id 'bash-ls )) lsp-bash-explainshell-endpoint and lsp-bash-highlight-parsing-errors are language client defcustom that expose supported server environment settings in a type-safe way. If you change any of those variables, restart the language server with lsp-restart-workspace for the changes to be applied. Sections # lsp-mode provides tools to bridge emacs defcustom as a language configuration sections properties(see specification workspace/configuration ). In addition you may use lsp-generate-settings from Generate Settings script to generate defcustom from package.json VScode plugin manifest. Example: ( defcustom lsp-foo-language-server-property \"bar\" \"Demo property.\" :group 'foo-ls :risky t ) ( lsp-register-custom-settings ' (( \"foo.section.property\" lsp-foo-language-server-property ))) ( lsp-configuration-section \"foo\" ) ;; => ((\"foo\" (\"settings\" (\"property\" . \"bar\")))) Documentation # Add the new language server to the lsp-clients.json file sorted by the full-name key alphabetically. Create a new navigation entry in mkdocs.yml file.","title":"Adding new language"},{"location":"page/adding-new-language/#adding-support-for-languages","text":"","title":"Adding support for languages"},{"location":"page/adding-new-language/#registering-server","text":"Here it is the minimal configuration that is needed for new language server registration. Refer to the documentation of lsp-client.el for the additional settings supported on registration time. lsp-language-id-configuration must be updated to contain the corresponding mode -> language id - in this case (python-mode . \"python\") ( defvar lsp-language-id-configuration ' ( ... ( python-mode . \"python\" ) ... )) ;; if you are adding the support for your language server in separate repo use ;; (add-to-list 'lsp-language-id-configuration '(python-mode . \"python\")) ( lsp-register-client ( make-lsp-client :new-connection ( lsp-stdio-connection \"pyls\" ) :major-modes ' ( python-mode ) :server-id 'pyls )) If the language server supports environment variables to control additional behavior, you can register that by using the :environment-fn function, like the Bash language client does: ( lsp-register-client ( make-lsp-client :new-connection ( lsp-stdio-connection ' ( \"bash-language-server\" \"start\" )) :major-modes ' ( sh-mode ) :priority -1 :environment-fn ( lambda () (( \"EXPLAINSHELL_ENDPOINT\" . lsp-bash-explainshell-endpoint ) ( \"HIGHLIGHT_PARSING_ERRORS\" . lsp-bash-highlight-parsing-errors ))) :server-id 'bash-ls )) lsp-bash-explainshell-endpoint and lsp-bash-highlight-parsing-errors are language client defcustom that expose supported server environment settings in a type-safe way. If you change any of those variables, restart the language server with lsp-restart-workspace for the changes to be applied.","title":"Registering server"},{"location":"page/adding-new-language/#sections","text":"lsp-mode provides tools to bridge emacs defcustom as a language configuration sections properties(see specification workspace/configuration ). In addition you may use lsp-generate-settings from Generate Settings script to generate defcustom from package.json VScode plugin manifest. Example: ( defcustom lsp-foo-language-server-property \"bar\" \"Demo property.\" :group 'foo-ls :risky t ) ( lsp-register-custom-settings ' (( \"foo.section.property\" lsp-foo-language-server-property ))) ( lsp-configuration-section \"foo\" ) ;; => ((\"foo\" (\"settings\" (\"property\" . \"bar\"))))","title":"Sections"},{"location":"page/adding-new-language/#documentation","text":"Add the new language server to the lsp-clients.json file sorted by the full-name key alphabetically. Create a new navigation entry in mkdocs.yml file.","title":"Documentation"},{"location":"page/additional-settings/","text":"Additional settings # Recommended settings for related packages # Company (autocomplete) # ( setq company-minimum-prefix-length 1 company-idle-delay 0.0 ) ;; default is 0.2 Formatting # In general the formatter settings are language server specific(e. g. JDT LS uses eclipse formatter file and lsp-java-format-settings-url to configure it while clangd uses clangd-format ). The only settings that are controlled on lsp-mode level are indent size and whether the server should use tabs or spaces. Use c-basic-offset for cc-mode derived moves(e. g. java, C++) to control the tab size. Use tab-width for any other mode to do the same. Use indent-tabs-mode for selecting tab/spaces.","title":"Additional settings"},{"location":"page/additional-settings/#additional-settings","text":"","title":"Additional settings"},{"location":"page/additional-settings/#recommended-settings-for-related-packages","text":"","title":"Recommended settings for related packages"},{"location":"page/additional-settings/#company-autocomplete","text":"( setq company-minimum-prefix-length 1 company-idle-delay 0.0 ) ;; default is 0.2","title":"Company (autocomplete)"},{"location":"page/additional-settings/#formatting","text":"In general the formatter settings are language server specific(e. g. JDT LS uses eclipse formatter file and lsp-java-format-settings-url to configure it while clangd uses clangd-format ). The only settings that are controlled on lsp-mode level are indent size and whether the server should use tabs or spaces. Use c-basic-offset for cc-mode derived moves(e. g. java, C++) to control the tab size. Use tab-width for any other mode to do the same. Use indent-tabs-mode for selecting tab/spaces.","title":"Formatting"},{"location":"page/faq/","text":"FAQ # How do I troubleshoot \"Server FOO-LS:pid exited with status signal. Do you want to restart it? (y or n)\" ? This message indicates that the language server has crashed for some reason. You may check the server stderr which is *FOO-LS::stderr* . If you get this try to run the exact command that lsp-mode is running in the terminal. You may find it in *lsp-log* buffer. How to configure a server with local variables? Add lsp server call to hack-local-variables-hook which runs right after the local variables are loaded. ( add-hook 'hack-local-variables-hook ( lambda () ( when ( derived-mode-p 'XXX-mode ) ( lsp )))) I have multiple language servers registered for language FOO. Which one will be used when opening a project? The one with highest priority wins. lsp-clients.el predefined servers have priority -1, lower than external packages (priority 0 if unspecified). If a server is registered with :add-on? flag set to t it will be started in parallel to the other servers that are registered for the current mode. I have multiple language servers for language FOO and I want to select the server per project, what can I do? You may create dir-local for each of the projects and specify list of lsp-enabled-clients . This will narrow the list of the clients that are going to be tested for the project. The completion does not work fine and inserts arguments and placeholders, what I am doing wrong? make sure you have installed yasnippet and you have yasnippet minor mode enabled. I am getting \"Package \u2018spinner-1.7.3\u2019 is unavailable\" when trying to install lsp-mode . This is caused by GPG keys used by the ELPA package manager not being up to date. You may fix by installing: gnu-elpa-keyring-update The flycheck does not work in typescript , html and javascript blocks in vue-mode . How to fix that? This is caused by the fact that vue-mode uses multiple major modes in single file and the lsp-ui checker may not associated with the major mode at point. You could fix that by adding the following lines to your config. ( with-eval-after-load 'lsp-mode ( mapc #' lsp-flycheck-add-mode ' ( typescript-mode js-mode css-mode vue-html-mode ))) I have disabled snippets and Rust Analyzer server inserts redundant $0 when performing completion? Rust Analyzer does not support disabling snippets - see https://github.com/rust-analyzer/rust-analyzer/issues/2518 How do I get flex completion in when using Emacs 26 ? flex filtering has been implemented in Emacs 27+ and lsp-mode is using it by default and there is no flex matching by default. In order to have flex completion by default you could either upgrade to Emacs 27 or try using helm-flex implementation including the following snippet in your config: ( setq lsp-completion-styles ' ( helm-flex )) See also #1652 .","title":"FAQ"},{"location":"page/faq/#faq","text":"How do I troubleshoot \"Server FOO-LS:pid exited with status signal. Do you want to restart it? (y or n)\" ? This message indicates that the language server has crashed for some reason. You may check the server stderr which is *FOO-LS::stderr* . If you get this try to run the exact command that lsp-mode is running in the terminal. You may find it in *lsp-log* buffer. How to configure a server with local variables? Add lsp server call to hack-local-variables-hook which runs right after the local variables are loaded. ( add-hook 'hack-local-variables-hook ( lambda () ( when ( derived-mode-p 'XXX-mode ) ( lsp )))) I have multiple language servers registered for language FOO. Which one will be used when opening a project? The one with highest priority wins. lsp-clients.el predefined servers have priority -1, lower than external packages (priority 0 if unspecified). If a server is registered with :add-on? flag set to t it will be started in parallel to the other servers that are registered for the current mode. I have multiple language servers for language FOO and I want to select the server per project, what can I do? You may create dir-local for each of the projects and specify list of lsp-enabled-clients . This will narrow the list of the clients that are going to be tested for the project. The completion does not work fine and inserts arguments and placeholders, what I am doing wrong? make sure you have installed yasnippet and you have yasnippet minor mode enabled. I am getting \"Package \u2018spinner-1.7.3\u2019 is unavailable\" when trying to install lsp-mode . This is caused by GPG keys used by the ELPA package manager not being up to date. You may fix by installing: gnu-elpa-keyring-update The flycheck does not work in typescript , html and javascript blocks in vue-mode . How to fix that? This is caused by the fact that vue-mode uses multiple major modes in single file and the lsp-ui checker may not associated with the major mode at point. You could fix that by adding the following lines to your config. ( with-eval-after-load 'lsp-mode ( mapc #' lsp-flycheck-add-mode ' ( typescript-mode js-mode css-mode vue-html-mode ))) I have disabled snippets and Rust Analyzer server inserts redundant $0 when performing completion? Rust Analyzer does not support disabling snippets - see https://github.com/rust-analyzer/rust-analyzer/issues/2518 How do I get flex completion in when using Emacs 26 ? flex filtering has been implemented in Emacs 27+ and lsp-mode is using it by default and there is no flex matching by default. In order to have flex completion by default you could either upgrade to Emacs 27 or try using helm-flex implementation including the following snippet in your config: ( setq lsp-completion-styles ' ( helm-flex )) See also #1652 .","title":"FAQ"},{"location":"page/gallery/","text":"Gallery # RUST Completion # Typescript references using lsp-ui # Debugging Python using dap-mode # Call hierarchy via ccls # Metals Doctor # Flutter debugging # Semantic highlighting # As provided by clangd, built from unreleased 10.0 branch, in this screenshot, all other font-locking has been disabled (hence no syntax highlighting of comments or basic keywords such as ~auto~): clang-tidy error explanations # From the clangd language server:","title":"Gallery"},{"location":"page/gallery/#gallery","text":"","title":"Gallery"},{"location":"page/gallery/#rust-completion","text":"","title":"RUST Completion"},{"location":"page/gallery/#typescript-references-using-lsp-ui","text":"","title":"Typescript references using lsp-ui"},{"location":"page/gallery/#debugging-python-using-dap-mode","text":"","title":"Debugging Python using dap-mode"},{"location":"page/gallery/#call-hierarchy-via-ccls","text":"","title":"Call hierarchy via ccls"},{"location":"page/gallery/#metals-doctor","text":"","title":"Metals Doctor"},{"location":"page/gallery/#flutter-debugging","text":"","title":"Flutter debugging"},{"location":"page/gallery/#semantic-highlighting","text":"As provided by clangd, built from unreleased 10.0 branch, in this screenshot, all other font-locking has been disabled (hence no syntax highlighting of comments or basic keywords such as ~auto~):","title":"Semantic highlighting"},{"location":"page/gallery/#clang-tidy-error-explanations","text":"From the clangd language server:","title":"clang-tidy error explanations"},{"location":"page/installation/","text":"Installation # You need first lsp-mode , that is a Emacs client for an LSP server. Then you need to install the specific LSP server for your language. Client # lsp-mode has multiple ways to install it. Manually via MELPA # The recommended way to install lsp-mode is via package.el - the built-in package manager in Emacs. lsp-mode is available on the two major package.el community maintained repos - MELPA Stable and MELPA . M-x package-install RET lsp-mode RET Doom Emacs # Doom Emacs has a module to install and configure lsp-mode automatically, you just need to add lsp below :tools in your init.el . To add lsp-mode support to some language, you can add the +lsp flag to the language you want. Example: init.el ... :lang ( clojure +lsp ) ( dart +lsp ) ( java +lsp ) ... For Doom Emacs module flags and more information, check the doom-emacs lsp module documentation . Spacemacs # lsp-mode is included in spacemacs develop branch. Add lsp to dotspacemacs-configuration-layers and configure the language that you want to use to be backed by lsp backend. Vanilla Emacs # You could go minimal and use lsp-mode as it is without external packages with the built-in flymake and completion-at-point or you could install the following extensions for better experience: lsp-ui for fancy sideline, popup documentation, VScode-like peek UI, etc. flycheck if you prefer the more popular flycheck over renewed flymake . lsp-mode will automatically pick it up. company-mode for completion popups. lsp-treemacs for various tree based UI controls (symbols, errors overview, call hierarchy, etc.) helm-lsp provides on type completion alternative of xref-apropos using helm . lsp-ivy provides on type completion alternative of xref-apropos using ivy . dap-mode if your language is supported by the debugger. ;; if you want to change prefix for lsp-mode keybindings. ( setq lsp-keymap-prefix \"s-l\" ) ( require 'lsp-mode ) ( add-hook 'XXX-mode-hook #' lsp ) Where XXX could be major mode like python , java , c++ . Alternatively, if you want to minimize you configuration you may use prog-mode-hook . In case you do that, lsp will try to start for each programming mode and echo a message when there is no client registered for the current mode or if the corresponding server is not present. In addition, lsp-mode will automatically detect and configure lsp-ui and company-lsp . To turn off that behavior you could set lsp-auto-configure to nil . To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use lsp-deferred instead of lsp : ( add-hook 'XXX-mode-hook #' lsp-deferred ) use-package # Replace (require 'lsp-mode) with the following if you use use-package. ;; set prefix for lsp-command-keymap (few alternatives - \"C-l\", \"C-c l\") ( setq lsp-keymap-prefix \"s-l\" ) ( use-package lsp-mode :hook ( ;; replace XXX-mode with concrete major-mode(e. g. python-mode) ( XXX-mode . lsp ) ;; if you want which-key integration ( lsp-mode . lsp-enable-which-key-integration )) :commands lsp ) ;; optionally ( use-package lsp-ui :commands lsp-ui-mode ) ;; if you are helm user ( use-package helm-lsp :commands helm-lsp-workspace-symbol ) ;; if you are ivy user ( use-package lsp-ivy :commands lsp-ivy-workspace-symbol ) ( use-package lsp-treemacs :commands lsp-treemacs-errors-list ) ;; optionally if you want to use debugger ( use-package dap-mode ) ;; (use-package dap-LANGUAGE) to load the dap adapter for your language ;; optional if you want which-key integration ( use-package which-key :config ( which-key-mode )) To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use lsp-deferred instead of lsp : ( use-package lsp-mode :hook ( XXX-mode . lsp-deferred ) :commands ( lsp lsp-deferred )) Install a language server # For instructions on how to install a server for your language, check the available supported servers .","title":"Installation"},{"location":"page/installation/#installation","text":"You need first lsp-mode , that is a Emacs client for an LSP server. Then you need to install the specific LSP server for your language.","title":"Installation"},{"location":"page/installation/#client","text":"lsp-mode has multiple ways to install it.","title":"Client"},{"location":"page/installation/#manually-via-melpa","text":"The recommended way to install lsp-mode is via package.el - the built-in package manager in Emacs. lsp-mode is available on the two major package.el community maintained repos - MELPA Stable and MELPA . M-x package-install RET lsp-mode RET","title":"Manually via MELPA"},{"location":"page/installation/#doom-emacs","text":"Doom Emacs has a module to install and configure lsp-mode automatically, you just need to add lsp below :tools in your init.el . To add lsp-mode support to some language, you can add the +lsp flag to the language you want. Example: init.el ... :lang ( clojure +lsp ) ( dart +lsp ) ( java +lsp ) ... For Doom Emacs module flags and more information, check the doom-emacs lsp module documentation .","title":"Doom Emacs"},{"location":"page/installation/#spacemacs","text":"lsp-mode is included in spacemacs develop branch. Add lsp to dotspacemacs-configuration-layers and configure the language that you want to use to be backed by lsp backend.","title":"Spacemacs"},{"location":"page/installation/#vanilla-emacs","text":"You could go minimal and use lsp-mode as it is without external packages with the built-in flymake and completion-at-point or you could install the following extensions for better experience: lsp-ui for fancy sideline, popup documentation, VScode-like peek UI, etc. flycheck if you prefer the more popular flycheck over renewed flymake . lsp-mode will automatically pick it up. company-mode for completion popups. lsp-treemacs for various tree based UI controls (symbols, errors overview, call hierarchy, etc.) helm-lsp provides on type completion alternative of xref-apropos using helm . lsp-ivy provides on type completion alternative of xref-apropos using ivy . dap-mode if your language is supported by the debugger. ;; if you want to change prefix for lsp-mode keybindings. ( setq lsp-keymap-prefix \"s-l\" ) ( require 'lsp-mode ) ( add-hook 'XXX-mode-hook #' lsp ) Where XXX could be major mode like python , java , c++ . Alternatively, if you want to minimize you configuration you may use prog-mode-hook . In case you do that, lsp will try to start for each programming mode and echo a message when there is no client registered for the current mode or if the corresponding server is not present. In addition, lsp-mode will automatically detect and configure lsp-ui and company-lsp . To turn off that behavior you could set lsp-auto-configure to nil . To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use lsp-deferred instead of lsp : ( add-hook 'XXX-mode-hook #' lsp-deferred )","title":"Vanilla Emacs"},{"location":"page/installation/#use-package","text":"Replace (require 'lsp-mode) with the following if you use use-package. ;; set prefix for lsp-command-keymap (few alternatives - \"C-l\", \"C-c l\") ( setq lsp-keymap-prefix \"s-l\" ) ( use-package lsp-mode :hook ( ;; replace XXX-mode with concrete major-mode(e. g. python-mode) ( XXX-mode . lsp ) ;; if you want which-key integration ( lsp-mode . lsp-enable-which-key-integration )) :commands lsp ) ;; optionally ( use-package lsp-ui :commands lsp-ui-mode ) ;; if you are helm user ( use-package helm-lsp :commands helm-lsp-workspace-symbol ) ;; if you are ivy user ( use-package lsp-ivy :commands lsp-ivy-workspace-symbol ) ( use-package lsp-treemacs :commands lsp-treemacs-errors-list ) ;; optionally if you want to use debugger ( use-package dap-mode ) ;; (use-package dap-LANGUAGE) to load the dap adapter for your language ;; optional if you want which-key integration ( use-package which-key :config ( which-key-mode )) To defer LSP server startup (and DidOpen notifications) until the buffer is visible you can use lsp-deferred instead of lsp : ( use-package lsp-mode :hook ( XXX-mode . lsp-deferred ) :commands ( lsp lsp-deferred ))","title":"use-package"},{"location":"page/installation/#install-a-language-server","text":"For instructions on how to install a server for your language, check the available supported servers .","title":"Install a language server"},{"location":"page/keybindings/","text":"Keybindings # When using lsp-mode most of the features depend on server capabilities. lsp-mode provides default bindings which are dynamically enabled/disabled based on the server functionality. All the commands are configured lsp-command-map which is bound to lsp-keymap-prefix (default s-l ). Keybinding Description s-l s s Entry point for the server startup. s-l s r Restart language server s-l s q Shutdown language server s-l s d Describes current session s-l s D Disconnect the buffer from the language server keeping the server running. s-l = = Ask the server to format this document. s-l = r Ask the server to format the region, or if none is selected, the current line. s-l F a Add new project root to the list of workspace folders. s-l F r Remove project root from the list of workspace folders. s-l F b Remove project root from the workspace blacklist. s-l T l Toggle code-lens overlays. s-l T L Toggle client-server protocol logging. s-l T h Toggle symbol highlighting. s-l T S Toggle minor mode for showing information for current line in sideline. (requires lsp-ui ) s-l T d Toggle minor mode for showing hover information in child frame. (requires lsp-ui ) s-l T s Toggle signature auto activate. s-l T f Toggle on type formatting. s-l T T Toggle global minor mode for synchronizing lsp-mode workspace folders and treemacs projects. (requires lsp-treemacs ) s-l g g Find definitions of the symbol under point. s-l g r Find references of the symbol under point. s-l g i Find implementations of the symbol under point. s-l g t Find type definitions of the symbol under point. s-l g d Find declarations of the symbol under point. s-l g h Show the incoming call hierarchy for the symbol at point. (requires lsp-treemacs ) s-l g a Find all meaningful symbols that match pattern. s-l h h Display the type signature and documentation of the thing at s-l h s Activate signature help. s-l h g Trigger display hover information popup and hide it on next typing. s-l r r Rename the symbol (and all references to it). s-l r o Perform the source.organizeImports code action, if available. s-l a a Execute code action. s-l a l Click lsp lens using \u2018avy\u2019 package. s-l a h Highlight symbol at point. s-l G g Peek definitions to the identifier at point. (requires lsp-ui ) s-l G r Peek references to the identifier at point. (requires lsp-ui ) s-l G i Peek implementation locations of the symbol at point. (requires lsp-ui ) s-l G s Peek symbols in the worskpace. (requires lsp-ui ) which-key integration # To enable which-key integration in the active major mode for lsp-mode-map you will need to call the lsp-enable-which-key-integration function. This could be done when lsp-mode starts with the following: ( with-eval-after-load 'lsp-mode ( add-hook 'lsp-mode-hook #' lsp-enable-which-key-integration )) You can also enable which-key integration for all major modes by passing t as a parameter. This is useful for buffers that can use multiple major modes like those using vue-mode .","title":"Keybindings"},{"location":"page/keybindings/#keybindings","text":"When using lsp-mode most of the features depend on server capabilities. lsp-mode provides default bindings which are dynamically enabled/disabled based on the server functionality. All the commands are configured lsp-command-map which is bound to lsp-keymap-prefix (default s-l ). Keybinding Description s-l s s Entry point for the server startup. s-l s r Restart language server s-l s q Shutdown language server s-l s d Describes current session s-l s D Disconnect the buffer from the language server keeping the server running. s-l = = Ask the server to format this document. s-l = r Ask the server to format the region, or if none is selected, the current line. s-l F a Add new project root to the list of workspace folders. s-l F r Remove project root from the list of workspace folders. s-l F b Remove project root from the workspace blacklist. s-l T l Toggle code-lens overlays. s-l T L Toggle client-server protocol logging. s-l T h Toggle symbol highlighting. s-l T S Toggle minor mode for showing information for current line in sideline. (requires lsp-ui ) s-l T d Toggle minor mode for showing hover information in child frame. (requires lsp-ui ) s-l T s Toggle signature auto activate. s-l T f Toggle on type formatting. s-l T T Toggle global minor mode for synchronizing lsp-mode workspace folders and treemacs projects. (requires lsp-treemacs ) s-l g g Find definitions of the symbol under point. s-l g r Find references of the symbol under point. s-l g i Find implementations of the symbol under point. s-l g t Find type definitions of the symbol under point. s-l g d Find declarations of the symbol under point. s-l g h Show the incoming call hierarchy for the symbol at point. (requires lsp-treemacs ) s-l g a Find all meaningful symbols that match pattern. s-l h h Display the type signature and documentation of the thing at s-l h s Activate signature help. s-l h g Trigger display hover information popup and hide it on next typing. s-l r r Rename the symbol (and all references to it). s-l r o Perform the source.organizeImports code action, if available. s-l a a Execute code action. s-l a l Click lsp lens using \u2018avy\u2019 package. s-l a h Highlight symbol at point. s-l G g Peek definitions to the identifier at point. (requires lsp-ui ) s-l G r Peek references to the identifier at point. (requires lsp-ui ) s-l G i Peek implementation locations of the symbol at point. (requires lsp-ui ) s-l G s Peek symbols in the worskpace. (requires lsp-ui )","title":"Keybindings"},{"location":"page/keybindings/#which-key-integration","text":"To enable which-key integration in the active major mode for lsp-mode-map you will need to call the lsp-enable-which-key-integration function. This could be done when lsp-mode starts with the following: ( with-eval-after-load 'lsp-mode ( add-hook 'lsp-mode-hook #' lsp-enable-which-key-integration )) You can also enable which-key integration for all major modes by passing t as a parameter. This is useful for buffers that can use multiple major modes like those using vue-mode .","title":"which-key integration"},{"location":"page/languages/","text":"Languages # Some of the servers are directly supported by lsp-mode by requiring lsp-clients.el while others require installing additional packages which provide server specific functionality. On left, you will find all current supported languages.","title":"Languages"},{"location":"page/languages/#languages","text":"Some of the servers are directly supported by lsp-mode by requiring lsp-clients.el while others require installing additional packages which provide server specific functionality. On left, you will find all current supported languages.","title":"Languages"},{"location":"page/lsp-ada/","text":"Ada # Server # For information about the LSP server, check the ada_language_server . Installation # For instruction on how to install, check here . Debugger: Yes (gdb) # Available configurations # lsp-ada-project-file # Default: default.gpr Set the project file full path to configure the language server with. The ~ prefix (for the user home directory) is supported. See https://github.com/AdaCore/ada_language_server for a per-project configuration example. lsp-ada-option-charset # Default: UTF-8 The charset to use by the Ada Language server. Defaults to \u2019UTF-8\u2019. lsp-ada-enable-diagnostics # Default: t A boolean to disable diagnostics. Defaults to true.","title":"Ada"},{"location":"page/lsp-ada/#ada","text":"","title":"Ada"},{"location":"page/lsp-ada/#server","text":"For information about the LSP server, check the ada_language_server .","title":"Server"},{"location":"page/lsp-ada/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-ada/#debugger-yes-gdb","text":"","title":"Debugger: Yes (gdb)"},{"location":"page/lsp-ada/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-ada/#lsp-ada-project-file","text":"Default: default.gpr Set the project file full path to configure the language server with. The ~ prefix (for the user home directory) is supported. See https://github.com/AdaCore/ada_language_server for a per-project configuration example.","title":"lsp-ada-project-file"},{"location":"page/lsp-ada/#lsp-ada-option-charset","text":"Default: UTF-8 The charset to use by the Ada Language server. Defaults to \u2019UTF-8\u2019.","title":"lsp-ada-option-charset"},{"location":"page/lsp-ada/#lsp-ada-enable-diagnostics","text":"Default: t A boolean to disable diagnostics. Defaults to true.","title":"lsp-ada-enable-diagnostics"},{"location":"page/lsp-angular/","text":"Angular # Server # For information about the LSP server, check the vscode-ng-language-service . Installation # For instruction on how to install, check here . Debugger: Not relevant # Available configurations #","title":"Angular"},{"location":"page/lsp-angular/#angular","text":"","title":"Angular"},{"location":"page/lsp-angular/#server","text":"For information about the LSP server, check the vscode-ng-language-service .","title":"Server"},{"location":"page/lsp-angular/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-angular/#debugger-not-relevant","text":"","title":"Debugger: Not relevant"},{"location":"page/lsp-angular/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-bash/","text":"Bash # Server # For information about the LSP server, check the bash-language-server . Installation # npm i -g bash-language-server Debugger: Not available # Available configurations # lsp-bash-explainshell-endpoint # Default: nil The endpoint to use explainshell.com to answer \u2019onHover\u2019 queries. See instructions at https://marketplace.visualstudio.com/items?itemName=mads-hartmann.bash-ide-vscode lsp-bash-highlight-parsing-errors # Default: nil Consider parsing errors in scripts as \u2019problems\u2019. lsp-bash-glob-pattern # Default: nil Glob pattern used to find shell script files to parse.","title":"Bash"},{"location":"page/lsp-bash/#bash","text":"","title":"Bash"},{"location":"page/lsp-bash/#server","text":"For information about the LSP server, check the bash-language-server .","title":"Server"},{"location":"page/lsp-bash/#installation","text":"npm i -g bash-language-server","title":"Installation"},{"location":"page/lsp-bash/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-bash/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-bash/#lsp-bash-explainshell-endpoint","text":"Default: nil The endpoint to use explainshell.com to answer \u2019onHover\u2019 queries. See instructions at https://marketplace.visualstudio.com/items?itemName=mads-hartmann.bash-ide-vscode","title":"lsp-bash-explainshell-endpoint"},{"location":"page/lsp-bash/#lsp-bash-highlight-parsing-errors","text":"Default: nil Consider parsing errors in scripts as \u2019problems\u2019.","title":"lsp-bash-highlight-parsing-errors"},{"location":"page/lsp-bash/#lsp-bash-glob-pattern","text":"Default: nil Glob pattern used to find shell script files to parse.","title":"lsp-bash-glob-pattern"},{"location":"page/lsp-bingo/","text":"Go # Server # For information about the LSP server, check the bingo . Installation # For instruction on how to install, check here . Debugger: Yes # Available configurations #","title":"Go (bingo)"},{"location":"page/lsp-bingo/#go","text":"","title":"Go"},{"location":"page/lsp-bingo/#server","text":"For information about the LSP server, check the bingo .","title":"Server"},{"location":"page/lsp-bingo/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-bingo/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-bingo/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-ccls/","text":"C++ # Server # For information about the LSP server, check the ccls . Installation # For instruction on how to install, check here . Debugger: Yes (gdb or lldb) # Available configurations #","title":"C++ (ccls)"},{"location":"page/lsp-ccls/#c","text":"","title":"C++"},{"location":"page/lsp-ccls/#server","text":"For information about the LSP server, check the ccls .","title":"Server"},{"location":"page/lsp-ccls/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-ccls/#debugger-yes-gdb-or-lldb","text":"","title":"Debugger: Yes (gdb or lldb)"},{"location":"page/lsp-ccls/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-clangd/","text":"C++ # Server # For information about the LSP server, check the clangd . Installation # For instruction on how to install, check here . Debugger: Yes (gdb or lldb) # Available configurations # lsp-clients-clangd-executable # Default: clangd The clangd executable to use. Leave as just the executable name to use the default behavior of finding the executable with \u2018exec-path\u2019. lsp-clients-clangd-args # Default: nil Extra arguments for the clangd executable.","title":"C++ (clangd)"},{"location":"page/lsp-clangd/#c","text":"","title":"C++"},{"location":"page/lsp-clangd/#server","text":"For information about the LSP server, check the clangd .","title":"Server"},{"location":"page/lsp-clangd/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-clangd/#debugger-yes-gdb-or-lldb","text":"","title":"Debugger: Yes (gdb or lldb)"},{"location":"page/lsp-clangd/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-clangd/#lsp-clients-clangd-executable","text":"Default: clangd The clangd executable to use. Leave as just the executable name to use the default behavior of finding the executable with \u2018exec-path\u2019.","title":"lsp-clients-clangd-executable"},{"location":"page/lsp-clangd/#lsp-clients-clangd-args","text":"Default: nil Extra arguments for the clangd executable.","title":"lsp-clients-clangd-args"},{"location":"page/lsp-clojure/","text":"Clojure # Server # For information about the LSP server, check the clojure-lsp . Installation # For instruction on how to install, check here . Debugger: Not available # Available configurations # lsp-clojure-server-command # Default: (bash -c clojure-lsp) The clojure-lisp server command.","title":"Clojure"},{"location":"page/lsp-clojure/#clojure","text":"","title":"Clojure"},{"location":"page/lsp-clojure/#server","text":"For information about the LSP server, check the clojure-lsp .","title":"Server"},{"location":"page/lsp-clojure/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-clojure/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-clojure/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-clojure/#lsp-clojure-server-command","text":"Default: (bash -c clojure-lsp) The clojure-lisp server command.","title":"lsp-clojure-server-command"},{"location":"page/lsp-cmake/","text":"CMake # Server # For information about the LSP server, check the cmake-language-server . Installation # pip install cmake-language-server Debugger: Not relevant # Available configurations #","title":"CMake"},{"location":"page/lsp-cmake/#cmake","text":"","title":"CMake"},{"location":"page/lsp-cmake/#server","text":"For information about the LSP server, check the cmake-language-server .","title":"Server"},{"location":"page/lsp-cmake/#installation","text":"pip install cmake-language-server","title":"Installation"},{"location":"page/lsp-cmake/#debugger-not-relevant","text":"","title":"Debugger: Not relevant"},{"location":"page/lsp-cmake/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-crystal/","text":"Crystal # Server # For information about the LSP server, check the scry . Installation # For instruction on how to install, check here . Debugger: Not available # Available configurations # lsp-clients-crystal-executable # Default: (scry --stdio) Command to start the scry language server.","title":"Crystal"},{"location":"page/lsp-crystal/#crystal","text":"","title":"Crystal"},{"location":"page/lsp-crystal/#server","text":"For information about the LSP server, check the scry .","title":"Server"},{"location":"page/lsp-crystal/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-crystal/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-crystal/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-crystal/#lsp-clients-crystal-executable","text":"Default: (scry --stdio) Command to start the scry language server.","title":"lsp-clients-crystal-executable"},{"location":"page/lsp-csharp/","text":"C# # Server # For information about the LSP server, check the OmniSharp-Roslyn . Installation # For instruction on how to install, check here . Debugger: Not available # Available configurations # lsp-csharp-server-install-dir # Default: ~/.emacs.d/.cache/lsp/omnisharp-roslyn/ Installation directory for OmniSharp Roslyn server. lsp-csharp-server-path # Default: nil The path to the OmniSharp Roslyn language-server binary. Set this if you have the binary installed or have it built yourself.","title":"C#"},{"location":"page/lsp-csharp/#c","text":"","title":"C#"},{"location":"page/lsp-csharp/#server","text":"For information about the LSP server, check the OmniSharp-Roslyn .","title":"Server"},{"location":"page/lsp-csharp/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-csharp/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-csharp/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-csharp/#lsp-csharp-server-install-dir","text":"Default: ~/.emacs.d/.cache/lsp/omnisharp-roslyn/ Installation directory for OmniSharp Roslyn server.","title":"lsp-csharp-server-install-dir"},{"location":"page/lsp-csharp/#lsp-csharp-server-path","text":"Default: nil The path to the OmniSharp Roslyn language-server binary. Set this if you have the binary installed or have it built yourself.","title":"lsp-csharp-server-path"},{"location":"page/lsp-css/","text":"CSS/LessCSS/SASS/SCSS # Server # For information about the LSP server, check the css . Installation # npm install -g vscode-css-languageserver-bin Debugger: Not available # Available configurations # lsp-css-experimental-custom-data # Default: nil A list of JSON file paths that define custom CSS data that loads custom properties, at directives, pseudo classes / elements. lsp-css-completion-trigger-property-value-completion # Default: t By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior. lsp-css-validate # Default: t Enables or disables all validations. lsp-css-lint-compatible-vendor-prefixes # Default: ignore When using a vendor-specific prefix make sure to also include all other vendor-specific properties. lsp-css-lint-vendor-prefix # Default: warning When using a vendor-specific prefix, also include the standard property. lsp-css-lint-duplicate-properties # Default: ignore Do not use duplicate style definitions. lsp-css-lint-empty-rules # Default: warning Do not use empty rulesets. lsp-css-lint-import-statement # Default: ignore Import statements do not load in parallel. lsp-css-lint-box-model # Default: ignore lsp-css-lint-universal-selector # Default: ignore lsp-css-lint-zero-units # Default: ignore No unit for zero needed. lsp-css-lint-font-face-properties # Default: warning lsp-css-lint-hex-color-length # Default: error Hex colors must consist of three or six hex numbers. lsp-css-lint-arguments-in-color-function # Default: error Invalid number of parameters. lsp-css-lint-unknown-properties # Default: warning Unknown property. lsp-css-lint-valid-properties # Default: nil A list of properties that are not validated against the \u2018unknownProperties\u2018 rule. lsp-css-lint-ie-hack # Default: ignore IE hacks are only necessary when supporting IE7 and older. lsp-css-lint-unknown-vendor-specific-properties # Default: ignore Unknown vendor specific property. lsp-css-lint-property-ignored-due-to-display # Default: warning lsp-css-lint-important # Default: ignore lsp-css-lint-float # Default: ignore lsp-css-lint-id-selector # Default: ignore Selectors should not contain IDs because these rules are too tightly coupled with the HTML. lsp-css-lint-unknown-at-rules # Default: warning Unknown at-rule. lsp-css-trace-server # Default: off Traces the communication between VS Code and the CSS language server.","title":"CSS/LessCSS/SASS/SCSS"},{"location":"page/lsp-css/#csslesscsssassscss","text":"","title":"CSS/LessCSS/SASS/SCSS"},{"location":"page/lsp-css/#server","text":"For information about the LSP server, check the css .","title":"Server"},{"location":"page/lsp-css/#installation","text":"npm install -g vscode-css-languageserver-bin","title":"Installation"},{"location":"page/lsp-css/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-css/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-css/#lsp-css-experimental-custom-data","text":"Default: nil A list of JSON file paths that define custom CSS data that loads custom properties, at directives, pseudo classes / elements.","title":"lsp-css-experimental-custom-data"},{"location":"page/lsp-css/#lsp-css-completion-trigger-property-value-completion","text":"Default: t By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.","title":"lsp-css-completion-trigger-property-value-completion"},{"location":"page/lsp-css/#lsp-css-validate","text":"Default: t Enables or disables all validations.","title":"lsp-css-validate"},{"location":"page/lsp-css/#lsp-css-lint-compatible-vendor-prefixes","text":"Default: ignore When using a vendor-specific prefix make sure to also include all other vendor-specific properties.","title":"lsp-css-lint-compatible-vendor-prefixes"},{"location":"page/lsp-css/#lsp-css-lint-vendor-prefix","text":"Default: warning When using a vendor-specific prefix, also include the standard property.","title":"lsp-css-lint-vendor-prefix"},{"location":"page/lsp-css/#lsp-css-lint-duplicate-properties","text":"Default: ignore Do not use duplicate style definitions.","title":"lsp-css-lint-duplicate-properties"},{"location":"page/lsp-css/#lsp-css-lint-empty-rules","text":"Default: warning Do not use empty rulesets.","title":"lsp-css-lint-empty-rules"},{"location":"page/lsp-css/#lsp-css-lint-import-statement","text":"Default: ignore Import statements do not load in parallel.","title":"lsp-css-lint-import-statement"},{"location":"page/lsp-css/#lsp-css-lint-box-model","text":"Default: ignore","title":"lsp-css-lint-box-model"},{"location":"page/lsp-css/#lsp-css-lint-universal-selector","text":"Default: ignore","title":"lsp-css-lint-universal-selector"},{"location":"page/lsp-css/#lsp-css-lint-zero-units","text":"Default: ignore No unit for zero needed.","title":"lsp-css-lint-zero-units"},{"location":"page/lsp-css/#lsp-css-lint-font-face-properties","text":"Default: warning","title":"lsp-css-lint-font-face-properties"},{"location":"page/lsp-css/#lsp-css-lint-hex-color-length","text":"Default: error Hex colors must consist of three or six hex numbers.","title":"lsp-css-lint-hex-color-length"},{"location":"page/lsp-css/#lsp-css-lint-arguments-in-color-function","text":"Default: error Invalid number of parameters.","title":"lsp-css-lint-arguments-in-color-function"},{"location":"page/lsp-css/#lsp-css-lint-unknown-properties","text":"Default: warning Unknown property.","title":"lsp-css-lint-unknown-properties"},{"location":"page/lsp-css/#lsp-css-lint-valid-properties","text":"Default: nil A list of properties that are not validated against the \u2018unknownProperties\u2018 rule.","title":"lsp-css-lint-valid-properties"},{"location":"page/lsp-css/#lsp-css-lint-ie-hack","text":"Default: ignore IE hacks are only necessary when supporting IE7 and older.","title":"lsp-css-lint-ie-hack"},{"location":"page/lsp-css/#lsp-css-lint-unknown-vendor-specific-properties","text":"Default: ignore Unknown vendor specific property.","title":"lsp-css-lint-unknown-vendor-specific-properties"},{"location":"page/lsp-css/#lsp-css-lint-property-ignored-due-to-display","text":"Default: warning","title":"lsp-css-lint-property-ignored-due-to-display"},{"location":"page/lsp-css/#lsp-css-lint-important","text":"Default: ignore","title":"lsp-css-lint-important"},{"location":"page/lsp-css/#lsp-css-lint-float","text":"Default: ignore","title":"lsp-css-lint-float"},{"location":"page/lsp-css/#lsp-css-lint-id-selector","text":"Default: ignore Selectors should not contain IDs because these rules are too tightly coupled with the HTML.","title":"lsp-css-lint-id-selector"},{"location":"page/lsp-css/#lsp-css-lint-unknown-at-rules","text":"Default: warning Unknown at-rule.","title":"lsp-css-lint-unknown-at-rules"},{"location":"page/lsp-css/#lsp-css-trace-server","text":"Default: off Traces the communication between VS Code and the CSS language server.","title":"lsp-css-trace-server"},{"location":"page/lsp-dhall/","text":"Dhall # Server # For information about the LSP server, check the dhall-lsp-server . Installation # For instruction on how to install, check here . Debugger: Not available # Available configurations #","title":"Dhall"},{"location":"page/lsp-dhall/#dhall","text":"","title":"Dhall"},{"location":"page/lsp-dhall/#server","text":"For information about the LSP server, check the dhall-lsp-server .","title":"Server"},{"location":"page/lsp-dhall/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-dhall/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-dhall/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-dockerfile/","text":"Dockerfile # Server # For information about the LSP server, check the dockerfile-language-server-nodejs . Installation # npm install -g dockerfile-language-server-nodejs Debugger: Not available # Available configurations # lsp-dockerfile-language-server-command # Default: (docker-langserver --stdio) The command that starts the docker language server.","title":"Dockerfile"},{"location":"page/lsp-dockerfile/#dockerfile","text":"","title":"Dockerfile"},{"location":"page/lsp-dockerfile/#server","text":"For information about the LSP server, check the dockerfile-language-server-nodejs .","title":"Server"},{"location":"page/lsp-dockerfile/#installation","text":"npm install -g dockerfile-language-server-nodejs","title":"Installation"},{"location":"page/lsp-dockerfile/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-dockerfile/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-dockerfile/#lsp-dockerfile-language-server-command","text":"Default: (docker-langserver --stdio) The command that starts the docker language server.","title":"lsp-dockerfile-language-server-command"},{"location":"page/lsp-elixir/","text":"Elixir # Server # For information about the LSP server, check the elixir-lsp/elixir-ls . Installation # For instruction on how to install, check here . Debugger: Yes # Available configurations # lsp-clients-elixir-server-executable # Default: language_server.sh The elixir-language-server executable to use. Leave as just the executable name to use the default behavior of finding the executable with \u2018exec-path\u2019.","title":"Elixir"},{"location":"page/lsp-elixir/#elixir","text":"","title":"Elixir"},{"location":"page/lsp-elixir/#server","text":"For information about the LSP server, check the elixir-lsp/elixir-ls .","title":"Server"},{"location":"page/lsp-elixir/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-elixir/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-elixir/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-elixir/#lsp-clients-elixir-server-executable","text":"Default: language_server.sh The elixir-language-server executable to use. Leave as just the executable name to use the default behavior of finding the executable with \u2018exec-path\u2019.","title":"lsp-clients-elixir-server-executable"},{"location":"page/lsp-elm/","text":"Elm # Server # For information about the LSP server, check the elmLS . Installation # npm i -g @elm-tooling/elm-language-server, or clone the repository and follow installation instructions Debugger: Not available # Available configurations # lsp-elm-elm-language-server-path # Default: elm-language-server Path for elm-language-server. Can be installed globally with: npm i -g @elm-tooling/elm-language-server, or manually by cloning the repo and following the installing instructions. lsp-elm-trace-server # Default: nil Enable/disable trace logging of client and server communication. lsp-elm-elm-path # Default: `` The path to your elm executable. Should be empty by default, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder. lsp-elm-elm-format-path # Default: `` The path to your elm-format executable. Should be empty by default, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder. lsp-elm-elm-test-path # Default: `` The path to your elm-test executable. Should be empty by default, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder. lsp-elm-elm-analyse-trigger # Default: change Elm-analyse executed on \u2019change\u2019, \u2019save\u2019 or \u2019never\u2019 (default: \u2019change\u2019). lsp-elm-server-args # Default: (--stdio) Arguments to pass to the server.","title":"Elm"},{"location":"page/lsp-elm/#elm","text":"","title":"Elm"},{"location":"page/lsp-elm/#server","text":"For information about the LSP server, check the elmLS .","title":"Server"},{"location":"page/lsp-elm/#installation","text":"npm i -g @elm-tooling/elm-language-server, or clone the repository and follow installation instructions","title":"Installation"},{"location":"page/lsp-elm/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-elm/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-elm/#lsp-elm-elm-language-server-path","text":"Default: elm-language-server Path for elm-language-server. Can be installed globally with: npm i -g @elm-tooling/elm-language-server, or manually by cloning the repo and following the installing instructions.","title":"lsp-elm-elm-language-server-path"},{"location":"page/lsp-elm/#lsp-elm-trace-server","text":"Default: nil Enable/disable trace logging of client and server communication.","title":"lsp-elm-trace-server"},{"location":"page/lsp-elm/#lsp-elm-elm-path","text":"Default: `` The path to your elm executable. Should be empty by default, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder.","title":"lsp-elm-elm-path"},{"location":"page/lsp-elm/#lsp-elm-elm-format-path","text":"Default: `` The path to your elm-format executable. Should be empty by default, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder.","title":"lsp-elm-elm-format-path"},{"location":"page/lsp-elm/#lsp-elm-elm-test-path","text":"Default: `` The path to your elm-test executable. Should be empty by default, in that case it will assume the name and try to first get it from a local npm installation or a global one. If you set it manually it will not try to load from the npm folder.","title":"lsp-elm-elm-test-path"},{"location":"page/lsp-elm/#lsp-elm-elm-analyse-trigger","text":"Default: change Elm-analyse executed on \u2019change\u2019, \u2019save\u2019 or \u2019never\u2019 (default: \u2019change\u2019).","title":"lsp-elm-elm-analyse-trigger"},{"location":"page/lsp-elm/#lsp-elm-server-args","text":"Default: (--stdio) Arguments to pass to the server.","title":"lsp-elm-server-args"},{"location":"page/lsp-emmy-lua/","text":"Lua # Server # For information about the LSP server, check the EmmyLua . Installation # For instruction on how to install, check here . Debugger: Not available # Available configurations # lsp-clients-emmy-lua-java-path # Default: java Path to java which will be used for running emmy-lua language server. lsp-clients-emmy-lua-jar-path # Default: ~/.emacs.d/EmmyLua-LS-all.jar Path to jar which will be used for running EmmyLua language server.","title":"Lua"},{"location":"page/lsp-emmy-lua/#lua","text":"","title":"Lua"},{"location":"page/lsp-emmy-lua/#server","text":"For information about the LSP server, check the EmmyLua .","title":"Server"},{"location":"page/lsp-emmy-lua/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-emmy-lua/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-emmy-lua/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-emmy-lua/#lsp-clients-emmy-lua-java-path","text":"Default: java Path to java which will be used for running emmy-lua language server.","title":"lsp-clients-emmy-lua-java-path"},{"location":"page/lsp-emmy-lua/#lsp-clients-emmy-lua-jar-path","text":"Default: ~/.emacs.d/EmmyLua-LS-all.jar Path to jar which will be used for running EmmyLua language server.","title":"lsp-clients-emmy-lua-jar-path"},{"location":"page/lsp-erlang/","text":"Erlang # Server # For information about the LSP server, check the erlang_ls . Installation # For instruction on how to install, check here . Debugger: Not available # Available configurations # lsp-erlang-server-path # Default: erlang_ls Path to the Erlang Language Server binary. lsp-erlang-server-connection-type # Default: stdio Type of connection to use with the Erlang Language Server: tcp or stdio","title":"Erlang"},{"location":"page/lsp-erlang/#erlang","text":"","title":"Erlang"},{"location":"page/lsp-erlang/#server","text":"For information about the LSP server, check the erlang_ls .","title":"Server"},{"location":"page/lsp-erlang/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-erlang/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-erlang/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-erlang/#lsp-erlang-server-path","text":"Default: erlang_ls Path to the Erlang Language Server binary.","title":"lsp-erlang-server-path"},{"location":"page/lsp-erlang/#lsp-erlang-server-connection-type","text":"Default: stdio Type of connection to use with the Erlang Language Server: tcp or stdio","title":"lsp-erlang-server-connection-type"},{"location":"page/lsp-eslint/","text":"Eslint # Server # For information about the LSP server, check the eslint . Installation # For instruction on how to install, check here . Debugger: N/A # Available configurations # lsp-eslint-server-command # Default: (node ~/server/out/eslintServer.js --stdio) Command to start eslint server. lsp-eslint-enable # Default: t Controls whether eslint is enabled for JavaScript files or not. lsp-eslint-package-manager # Default: npm The package manager you use to install node modules. lsp-eslint-format # Default: t Whether to perform format. lsp-eslint-node-path # Default: nil A path added to NODE_PATH when resolving the eslint module. lsp-eslint-options # Default: nil The eslint options object to provide args normally passed to eslint when executed from a command line (see http://eslint.org/docs/developer-guide/nodejs-api#cliengine). lsp-eslint-trace-server # Default: off Traces the communication between VSCode and the eslint linter service. lsp-eslint-run # Default: onType Run the linter on save (onSave) or on type (onType) lsp-eslint-auto-fix-on-save # Default: nil Turns auto fix on save on or off. lsp-eslint-quiet # Default: nil Turns on quiet mode, which ignores warnings. lsp-eslint-working-directories # Default: [] lsp-eslint-validate # Default: [javascript javascriptreact] An array of language ids which should be validated by ESLint lsp-eslint-provide-lint-task # Default: nil Controls whether a task for linting the whole workspace will be available. lsp-eslint-lint-task-enable # Default: nil Controls whether a task for linting the whole workspace will be available. lsp-eslint-lint-task-options # Default: . Command line options applied when running the task for linting the whole workspace (see https://eslint.org/docs/user-guide/command-line-interface). lsp-eslint-runtime # Default: nil The location of the node binary to run ESLint under. lsp-eslint-code-action-disable-rule-comment # Default: ((enable . t) (location . separateLine)) lsp-eslint-code-action-show-documentation # Default: ((enable . t)) lsp-eslint-experimental-incremental-sync # Default: t Controls whether the new incremental text document synchronization should be used.","title":"Eslint"},{"location":"page/lsp-eslint/#eslint","text":"","title":"Eslint"},{"location":"page/lsp-eslint/#server","text":"For information about the LSP server, check the eslint .","title":"Server"},{"location":"page/lsp-eslint/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-eslint/#debugger-na","text":"","title":"Debugger: N/A"},{"location":"page/lsp-eslint/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-eslint/#lsp-eslint-server-command","text":"Default: (node ~/server/out/eslintServer.js --stdio) Command to start eslint server.","title":"lsp-eslint-server-command"},{"location":"page/lsp-eslint/#lsp-eslint-enable","text":"Default: t Controls whether eslint is enabled for JavaScript files or not.","title":"lsp-eslint-enable"},{"location":"page/lsp-eslint/#lsp-eslint-package-manager","text":"Default: npm The package manager you use to install node modules.","title":"lsp-eslint-package-manager"},{"location":"page/lsp-eslint/#lsp-eslint-format","text":"Default: t Whether to perform format.","title":"lsp-eslint-format"},{"location":"page/lsp-eslint/#lsp-eslint-node-path","text":"Default: nil A path added to NODE_PATH when resolving the eslint module.","title":"lsp-eslint-node-path"},{"location":"page/lsp-eslint/#lsp-eslint-options","text":"Default: nil The eslint options object to provide args normally passed to eslint when executed from a command line (see http://eslint.org/docs/developer-guide/nodejs-api#cliengine).","title":"lsp-eslint-options"},{"location":"page/lsp-eslint/#lsp-eslint-trace-server","text":"Default: off Traces the communication between VSCode and the eslint linter service.","title":"lsp-eslint-trace-server"},{"location":"page/lsp-eslint/#lsp-eslint-run","text":"Default: onType Run the linter on save (onSave) or on type (onType)","title":"lsp-eslint-run"},{"location":"page/lsp-eslint/#lsp-eslint-auto-fix-on-save","text":"Default: nil Turns auto fix on save on or off.","title":"lsp-eslint-auto-fix-on-save"},{"location":"page/lsp-eslint/#lsp-eslint-quiet","text":"Default: nil Turns on quiet mode, which ignores warnings.","title":"lsp-eslint-quiet"},{"location":"page/lsp-eslint/#lsp-eslint-working-directories","text":"Default: []","title":"lsp-eslint-working-directories"},{"location":"page/lsp-eslint/#lsp-eslint-validate","text":"Default: [javascript javascriptreact] An array of language ids which should be validated by ESLint","title":"lsp-eslint-validate"},{"location":"page/lsp-eslint/#lsp-eslint-provide-lint-task","text":"Default: nil Controls whether a task for linting the whole workspace will be available.","title":"lsp-eslint-provide-lint-task"},{"location":"page/lsp-eslint/#lsp-eslint-lint-task-enable","text":"Default: nil Controls whether a task for linting the whole workspace will be available.","title":"lsp-eslint-lint-task-enable"},{"location":"page/lsp-eslint/#lsp-eslint-lint-task-options","text":"Default: . Command line options applied when running the task for linting the whole workspace (see https://eslint.org/docs/user-guide/command-line-interface).","title":"lsp-eslint-lint-task-options"},{"location":"page/lsp-eslint/#lsp-eslint-runtime","text":"Default: nil The location of the node binary to run ESLint under.","title":"lsp-eslint-runtime"},{"location":"page/lsp-eslint/#lsp-eslint-code-action-disable-rule-comment","text":"Default: ((enable . t) (location . separateLine))","title":"lsp-eslint-code-action-disable-rule-comment"},{"location":"page/lsp-eslint/#lsp-eslint-code-action-show-documentation","text":"Default: ((enable . t))","title":"lsp-eslint-code-action-show-documentation"},{"location":"page/lsp-eslint/#lsp-eslint-experimental-incremental-sync","text":"Default: t Controls whether the new incremental text document synchronization should be used.","title":"lsp-eslint-experimental-incremental-sync"},{"location":"page/lsp-flow/","text":"JavaScript Flow # Server # For information about the LSP server, check the flow . Installation # For instruction on how to install, check here . Debugger: Yes (Firefox/Chrome) # Available configurations # lsp-clients-flow-server # Default: flow The Flow executable to use. Leave as just the executable name to use the default behavior of finding the executable with variable \u2018exec-path\u2019. lsp-clients-flow-server-args # Default: (lsp) Extra arguments for starting the Flow language server.","title":"JavaScript Flow"},{"location":"page/lsp-flow/#javascript-flow","text":"","title":"JavaScript Flow"},{"location":"page/lsp-flow/#server","text":"For information about the LSP server, check the flow .","title":"Server"},{"location":"page/lsp-flow/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-flow/#debugger-yes-firefoxchrome","text":"","title":"Debugger: Yes (Firefox/Chrome)"},{"location":"page/lsp-flow/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-flow/#lsp-clients-flow-server","text":"Default: flow The Flow executable to use. Leave as just the executable name to use the default behavior of finding the executable with variable \u2018exec-path\u2019.","title":"lsp-clients-flow-server"},{"location":"page/lsp-flow/#lsp-clients-flow-server-args","text":"Default: (lsp) Extra arguments for starting the Flow language server.","title":"lsp-clients-flow-server-args"},{"location":"page/lsp-fortran/","text":"Fortran # Server # For information about the LSP server, check the fortran-language-server . Installation # pip install fortran-language-server Debugger: Yes # Available configurations # lsp-clients-fortls-executable # Default: fortls The fortls executable to use. Leave as just the executable name to use the default behavior of finding the executable with \u2018exec-path\u2019. lsp-clients-fortls-args # Default: nil Extra arguments for the fortls executable","title":"Fortran"},{"location":"page/lsp-fortran/#fortran","text":"","title":"Fortran"},{"location":"page/lsp-fortran/#server","text":"For information about the LSP server, check the fortran-language-server .","title":"Server"},{"location":"page/lsp-fortran/#installation","text":"pip install fortran-language-server","title":"Installation"},{"location":"page/lsp-fortran/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-fortran/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-fortran/#lsp-clients-fortls-executable","text":"Default: fortls The fortls executable to use. Leave as just the executable name to use the default behavior of finding the executable with \u2018exec-path\u2019.","title":"lsp-clients-fortls-executable"},{"location":"page/lsp-fortran/#lsp-clients-fortls-args","text":"Default: nil Extra arguments for the fortls executable","title":"lsp-clients-fortls-args"},{"location":"page/lsp-fsharp/","text":"F# # Server # For information about the LSP server, check the fsautocomplete . Installation # Automatic by lsp-mode Debugger: Not available # Available configurations # lsp-fsharp-server-runtime # Default: net-core The .NET runtime to use. lsp-fsharp-server-install-dir # Default: ~/.emacs.d/.cache/lsp/fsautocomplete/ Install directory for fsautocomplete server. The slash is expected at the end. lsp-fsharp-server-args # Default: nil Extra arguments for the F# language server. lsp-fsharp-keywords-autocomplete # Default: t Provides keywords in autocomplete list lsp-fsharp-external-autocomplete # Default: nil Provides autocompletion for symbols from not opened namespaces/modules; inserts open on accept lsp-fsharp-linter # Default: t Enables FSharpLint integration, provides additional warnings and code action fixes lsp-fsharp-union-case-stub-generation # Default: t Enablesa code action to generate pattern matching cases lsp-fsharp-union-case-stub-generation-body # Default: failwith \"Not Implemented\" defines dummy body used by pattern matching generator lsp-fsharp-record-stub-generation # Default: t Enables code action to generate record stub lsp-fsharp-record-stub-generation-body # Default: failwith \"Not Implemented\" defines dummy body used by record stub generator lsp-fsharp-interface-stub-generation # Default: t Enables code action to generate an interface stub lsp-fsharp-interface-stub-generation-object-identifier # Default: this Defines object identifier used by interface stub generator, e.g. \u2018this\u2019 or \u2018self\u2019 lsp-fsharp-interface-stub-generation-method-body # Default: failwith \"Not Implemented\" Defines dummy body used by interface stub generator lsp-fsharp-unused-opens-analyzer # Default: t Enables unused open detection lsp-fsharp-unused-declarations-analyzer # Default: t Enables unused symbol detection lsp-fsharp-simplify-name-analyzer # Default: nil Enables simplify name analyzer and remove redundant qualifier quick fix lsp-fsharp-resolve-namespaces # Default: t Enables resolve namespace quick fix; adds \u2018open\u2019 if symbol is from not yet opened module/namespace lsp-fsharp-enable-reference-code-lens # Default: t Enables reference count code lenses. It is recommended to disable if \u2018--backgorund-service-enabled\u2019 is not used lsp-fsharp-auto-workspace-init # Default: nil Enable automatic workspace initialization. Do note that this can cause unexpected or challenging behaviors, as solutions with test projects are not autoloaded by FSharpAutoComplete.","title":"F#"},{"location":"page/lsp-fsharp/#f","text":"","title":"F#"},{"location":"page/lsp-fsharp/#server","text":"For information about the LSP server, check the fsautocomplete .","title":"Server"},{"location":"page/lsp-fsharp/#installation","text":"Automatic by lsp-mode","title":"Installation"},{"location":"page/lsp-fsharp/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-fsharp/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-fsharp/#lsp-fsharp-server-runtime","text":"Default: net-core The .NET runtime to use.","title":"lsp-fsharp-server-runtime"},{"location":"page/lsp-fsharp/#lsp-fsharp-server-install-dir","text":"Default: ~/.emacs.d/.cache/lsp/fsautocomplete/ Install directory for fsautocomplete server. The slash is expected at the end.","title":"lsp-fsharp-server-install-dir"},{"location":"page/lsp-fsharp/#lsp-fsharp-server-args","text":"Default: nil Extra arguments for the F# language server.","title":"lsp-fsharp-server-args"},{"location":"page/lsp-fsharp/#lsp-fsharp-keywords-autocomplete","text":"Default: t Provides keywords in autocomplete list","title":"lsp-fsharp-keywords-autocomplete"},{"location":"page/lsp-fsharp/#lsp-fsharp-external-autocomplete","text":"Default: nil Provides autocompletion for symbols from not opened namespaces/modules; inserts open on accept","title":"lsp-fsharp-external-autocomplete"},{"location":"page/lsp-fsharp/#lsp-fsharp-linter","text":"Default: t Enables FSharpLint integration, provides additional warnings and code action fixes","title":"lsp-fsharp-linter"},{"location":"page/lsp-fsharp/#lsp-fsharp-union-case-stub-generation","text":"Default: t Enablesa code action to generate pattern matching cases","title":"lsp-fsharp-union-case-stub-generation"},{"location":"page/lsp-fsharp/#lsp-fsharp-union-case-stub-generation-body","text":"Default: failwith \"Not Implemented\" defines dummy body used by pattern matching generator","title":"lsp-fsharp-union-case-stub-generation-body"},{"location":"page/lsp-fsharp/#lsp-fsharp-record-stub-generation","text":"Default: t Enables code action to generate record stub","title":"lsp-fsharp-record-stub-generation"},{"location":"page/lsp-fsharp/#lsp-fsharp-record-stub-generation-body","text":"Default: failwith \"Not Implemented\" defines dummy body used by record stub generator","title":"lsp-fsharp-record-stub-generation-body"},{"location":"page/lsp-fsharp/#lsp-fsharp-interface-stub-generation","text":"Default: t Enables code action to generate an interface stub","title":"lsp-fsharp-interface-stub-generation"},{"location":"page/lsp-fsharp/#lsp-fsharp-interface-stub-generation-object-identifier","text":"Default: this Defines object identifier used by interface stub generator, e.g. \u2018this\u2019 or \u2018self\u2019","title":"lsp-fsharp-interface-stub-generation-object-identifier"},{"location":"page/lsp-fsharp/#lsp-fsharp-interface-stub-generation-method-body","text":"Default: failwith \"Not Implemented\" Defines dummy body used by interface stub generator","title":"lsp-fsharp-interface-stub-generation-method-body"},{"location":"page/lsp-fsharp/#lsp-fsharp-unused-opens-analyzer","text":"Default: t Enables unused open detection","title":"lsp-fsharp-unused-opens-analyzer"},{"location":"page/lsp-fsharp/#lsp-fsharp-unused-declarations-analyzer","text":"Default: t Enables unused symbol detection","title":"lsp-fsharp-unused-declarations-analyzer"},{"location":"page/lsp-fsharp/#lsp-fsharp-simplify-name-analyzer","text":"Default: nil Enables simplify name analyzer and remove redundant qualifier quick fix","title":"lsp-fsharp-simplify-name-analyzer"},{"location":"page/lsp-fsharp/#lsp-fsharp-resolve-namespaces","text":"Default: t Enables resolve namespace quick fix; adds \u2018open\u2019 if symbol is from not yet opened module/namespace","title":"lsp-fsharp-resolve-namespaces"},{"location":"page/lsp-fsharp/#lsp-fsharp-enable-reference-code-lens","text":"Default: t Enables reference count code lenses. It is recommended to disable if \u2018--backgorund-service-enabled\u2019 is not used","title":"lsp-fsharp-enable-reference-code-lens"},{"location":"page/lsp-fsharp/#lsp-fsharp-auto-workspace-init","text":"Default: nil Enable automatic workspace initialization. Do note that this can cause unexpected or challenging behaviors, as solutions with test projects are not autoloaded by FSharpAutoComplete.","title":"lsp-fsharp-auto-workspace-init"},{"location":"page/lsp-gdscript/","text":"GDScript # Server # For information about the LSP server, check the godot . Installation # For instruction on how to install, check here . Debugger: Not available # Available configurations # lsp-gdscript-port # Default: 6008 Port to connect server to","title":"GDScript"},{"location":"page/lsp-gdscript/#gdscript","text":"","title":"GDScript"},{"location":"page/lsp-gdscript/#server","text":"For information about the LSP server, check the godot .","title":"Server"},{"location":"page/lsp-gdscript/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-gdscript/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-gdscript/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-gdscript/#lsp-gdscript-port","text":"Default: 6008 Port to connect server to","title":"lsp-gdscript-port"},{"location":"page/lsp-gopls/","text":"Go # Server # For information about the LSP server, check the gopls . Installation # For instruction on how to install, check here . Debugger: Yes # Available configurations # lsp-gopls-use-placeholders # Default: t Cause gopls to provide placeholder parameter snippets when completing function calls. lsp-gopls-server-path # Default: gopls Path to gopls server binary. lsp-gopls-server-args # Default: nil Extra CLI arguments for gopls. lsp-gopls-build-flags # Default: [] A vector of flags passed on to the build system when invoked, applied to queries like \u2018go list\u2019. lsp-gopls-env # Default: nil \u2018gopls\u2019 has the unusual ability to set environment variables, intended to affect the behavior of commands invoked by \u2018gopls\u2019 on the user\u2019s behalf. This variable takes a hash table of env var names to desired values. lsp-gopls-hover-kind # Default: SynopsisDocumentation \u2018gopls\u2019 allows the end user to select the desired amount of documentation returned during e.g. hover and thing-at-point operations. lsp-gopls-codelens # Default: ((generate . t) (test . t)) Select what codelens should be enabled or not. The codelens can be found at https://github.com/golang/tools/blob/4d5ea46c79fe3bbb57dd00de9c167e93d94f4710/internal/lsp/source/options.go#L102-L108.","title":"Go (gopls)"},{"location":"page/lsp-gopls/#go","text":"","title":"Go"},{"location":"page/lsp-gopls/#server","text":"For information about the LSP server, check the gopls .","title":"Server"},{"location":"page/lsp-gopls/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-gopls/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-gopls/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-gopls/#lsp-gopls-use-placeholders","text":"Default: t Cause gopls to provide placeholder parameter snippets when completing function calls.","title":"lsp-gopls-use-placeholders"},{"location":"page/lsp-gopls/#lsp-gopls-server-path","text":"Default: gopls Path to gopls server binary.","title":"lsp-gopls-server-path"},{"location":"page/lsp-gopls/#lsp-gopls-server-args","text":"Default: nil Extra CLI arguments for gopls.","title":"lsp-gopls-server-args"},{"location":"page/lsp-gopls/#lsp-gopls-build-flags","text":"Default: [] A vector of flags passed on to the build system when invoked, applied to queries like \u2018go list\u2019.","title":"lsp-gopls-build-flags"},{"location":"page/lsp-gopls/#lsp-gopls-env","text":"Default: nil \u2018gopls\u2019 has the unusual ability to set environment variables, intended to affect the behavior of commands invoked by \u2018gopls\u2019 on the user\u2019s behalf. This variable takes a hash table of env var names to desired values.","title":"lsp-gopls-env"},{"location":"page/lsp-gopls/#lsp-gopls-hover-kind","text":"Default: SynopsisDocumentation \u2018gopls\u2019 allows the end user to select the desired amount of documentation returned during e.g. hover and thing-at-point operations.","title":"lsp-gopls-hover-kind"},{"location":"page/lsp-gopls/#lsp-gopls-codelens","text":"Default: ((generate . t) (test . t)) Select what codelens should be enabled or not. The codelens can be found at https://github.com/golang/tools/blob/4d5ea46c79fe3bbb57dd00de9c167e93d94f4710/internal/lsp/source/options.go#L102-L108.","title":"lsp-gopls-codelens"},{"location":"page/lsp-groovy/","text":"Groovy # Server # For information about the LSP server, check the groovy-language-server . Installation # For instruction on how to install, check here . Debugger: Not available # Available configurations # lsp-groovy-server-file # Default: ~/.emacs.d/groovy-language-server/groovy-language-server-all.jar JAR file path for groovy-language-server-all.jar.","title":"Groovy"},{"location":"page/lsp-groovy/#groovy","text":"","title":"Groovy"},{"location":"page/lsp-groovy/#server","text":"For information about the LSP server, check the groovy-language-server .","title":"Server"},{"location":"page/lsp-groovy/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-groovy/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-groovy/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-groovy/#lsp-groovy-server-file","text":"Default: ~/.emacs.d/groovy-language-server/groovy-language-server-all.jar JAR file path for groovy-language-server-all.jar.","title":"lsp-groovy-server-file"},{"location":"page/lsp-hack/","text":"Hack # Server # For information about the LSP server, check the hhvm . Installation # For instruction on how to install, check here . Debugger: Not available # Available configurations # lsp-clients-hack-command # Default: (hh_client lsp --from emacs) Command to start hh_client.","title":"Hack"},{"location":"page/lsp-hack/#hack","text":"","title":"Hack"},{"location":"page/lsp-hack/#server","text":"For information about the LSP server, check the hhvm .","title":"Server"},{"location":"page/lsp-hack/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-hack/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-hack/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-hack/#lsp-clients-hack-command","text":"Default: (hh_client lsp --from emacs) Command to start hh_client.","title":"lsp-clients-hack-command"},{"location":"page/lsp-html/","text":"HTML # Server # For information about the LSP server, check the html . Installation # npm install -g vscode-html-languageserver-bin Debugger: Not available # Available configurations # lsp-html-experimental-custom-data # Default: nil A list of JSON file paths that define custom tags, properties and other HTML syntax constructs. Only workspace folder setting will be read. lsp-html-format-enable # Default: t Enable/disable default HTML formatter. lsp-html-format-wrap-line-length # Default: 120 Maximum amount of characters per line (0 = disable). lsp-html-format-unformatted # Default: wbr lsp-html-format-content-unformatted # Default: pre,code,textarea lsp-html-format-indent-inner-html # Default: nil lsp-html-format-preserve-new-lines # Default: t Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text. lsp-html-format-max-preserve-new-lines # Default: nil lsp-html-format-indent-handlebars # Default: nil lsp-html-format-end-with-newline # Default: nil End with a newline. lsp-html-format-extra-liners # Default: head, body, /html lsp-html-format-wrap-attributes # Default: auto Wrap attributes. lsp-html-suggest-html5 # Default: t Controls whether the built-in HTML language support suggests HTML5 tags, properties and values. lsp-html-validate-scripts # Default: t Controls whether the built-in HTML language support validates embedded scripts. lsp-html-validate-styles # Default: t Controls whether the built-in HTML language support validates embedded styles. lsp-html-auto-closing-tags # Default: t Enable/disable autoclosing of HTML tags. lsp-html-trace-server # Default: off Traces the communication between VS Code and the HTML language server. lsp-html-server-command-args # Default: (--stdio) Command to start html-languageserver.","title":"HTML"},{"location":"page/lsp-html/#html","text":"","title":"HTML"},{"location":"page/lsp-html/#server","text":"For information about the LSP server, check the html .","title":"Server"},{"location":"page/lsp-html/#installation","text":"npm install -g vscode-html-languageserver-bin","title":"Installation"},{"location":"page/lsp-html/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-html/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-html/#lsp-html-experimental-custom-data","text":"Default: nil A list of JSON file paths that define custom tags, properties and other HTML syntax constructs. Only workspace folder setting will be read.","title":"lsp-html-experimental-custom-data"},{"location":"page/lsp-html/#lsp-html-format-enable","text":"Default: t Enable/disable default HTML formatter.","title":"lsp-html-format-enable"},{"location":"page/lsp-html/#lsp-html-format-wrap-line-length","text":"Default: 120 Maximum amount of characters per line (0 = disable).","title":"lsp-html-format-wrap-line-length"},{"location":"page/lsp-html/#lsp-html-format-unformatted","text":"Default: wbr","title":"lsp-html-format-unformatted"},{"location":"page/lsp-html/#lsp-html-format-content-unformatted","text":"Default: pre,code,textarea","title":"lsp-html-format-content-unformatted"},{"location":"page/lsp-html/#lsp-html-format-indent-inner-html","text":"Default: nil","title":"lsp-html-format-indent-inner-html"},{"location":"page/lsp-html/#lsp-html-format-preserve-new-lines","text":"Default: t Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.","title":"lsp-html-format-preserve-new-lines"},{"location":"page/lsp-html/#lsp-html-format-max-preserve-new-lines","text":"Default: nil","title":"lsp-html-format-max-preserve-new-lines"},{"location":"page/lsp-html/#lsp-html-format-indent-handlebars","text":"Default: nil","title":"lsp-html-format-indent-handlebars"},{"location":"page/lsp-html/#lsp-html-format-end-with-newline","text":"Default: nil End with a newline.","title":"lsp-html-format-end-with-newline"},{"location":"page/lsp-html/#lsp-html-format-extra-liners","text":"Default: head, body, /html","title":"lsp-html-format-extra-liners"},{"location":"page/lsp-html/#lsp-html-format-wrap-attributes","text":"Default: auto Wrap attributes.","title":"lsp-html-format-wrap-attributes"},{"location":"page/lsp-html/#lsp-html-suggest-html5","text":"Default: t Controls whether the built-in HTML language support suggests HTML5 tags, properties and values.","title":"lsp-html-suggest-html5"},{"location":"page/lsp-html/#lsp-html-validate-scripts","text":"Default: t Controls whether the built-in HTML language support validates embedded scripts.","title":"lsp-html-validate-scripts"},{"location":"page/lsp-html/#lsp-html-validate-styles","text":"Default: t Controls whether the built-in HTML language support validates embedded styles.","title":"lsp-html-validate-styles"},{"location":"page/lsp-html/#lsp-html-auto-closing-tags","text":"Default: t Enable/disable autoclosing of HTML tags.","title":"lsp-html-auto-closing-tags"},{"location":"page/lsp-html/#lsp-html-trace-server","text":"Default: off Traces the communication between VS Code and the HTML language server.","title":"lsp-html-trace-server"},{"location":"page/lsp-html/#lsp-html-server-command-args","text":"Default: (--stdio) Command to start html-languageserver.","title":"lsp-html-server-command-args"},{"location":"page/lsp-intelephense/","text":"PHP(recommended) # Server # For information about the LSP server, check the intelephense . Installation # npm i intelephense -g Debugger: Yes # Available configurations # lsp-intelephense-files-max-size # Default: 1000000 Maximum file size in bytes. lsp-intelephense-files-associations # Default: [*.php *.phtml] Configure glob patterns to make files available for language server features. lsp-intelephense-files-exclude # Default: [**/.git/** **/.svn/** **/.hg/** **/CVS/** **/.DS_Store/** **/node_modules/** **/bower_components/** **/vendor/**/{Test,test,Tests,tests}/**] Configure glob patterns to exclude certain files and folders from all language server features. lsp-intelephense-stubs # Default: [apache bcmath bz2 calendar com_dotnet Core ctype curl date dba dom enchant exif fileinfo filter fpm ftp gd hash iconv imap interbase intl json ldap libxml mbstring mcrypt meta mssql mysqli oci8 odbc openssl pcntl pcre PDO pdo_ibm pdo_mysql pdo_pgsql pdo_sqlite pgsql Phar posix pspell readline recode Reflection regex session shmop SimpleXML snmp soap sockets sodium SPL sqlite3 standard superglobals sybase sysvmsg sysvsem sysvshm tidy tokenizer wddx xml xmlreader xmlrpc xmlwriter Zend OPcache zip zlib] Configure stub files for built in symbols and common extensions. The default setting includes PHP core and all bundled extensions. lsp-intelephense-completion-insert-use-declaration # Default: t Use declarations will be automatically inserted for namespaced classes, traits, interfaces, functions, and constants. lsp-intelephense-completion-fully-qualify-global-constants-and-functions # Default: nil Global namespace constants and functions will be fully qualified (prefixed with a backslash). lsp-intelephense-completion-trigger-parameter-hints # Default: t Method and function completions will include parentheses and trigger parameter hints. lsp-intelephense-completion-max-items # Default: 100 The maximum number of completion items returned per request. lsp-intelephense-format-enable # Default: t Enables formatting. lsp-intelephense-licence-key # Default: nil Enter your intelephense licence key here to access premium features. lsp-intelephense-telemetry-enabled # Default: nil Anonymous usage and crash data will be sent to Azure Application Insights. lsp-intelephense-rename-exclude # Default: [**/vendor/**] Glob patterns to exclude files and folders from having symbols renamed. Rename operation will fail if references and/or definitions are found in excluded files/folders. lsp-intelephense-trace-server # Default: off Traces the communication between VSCode and the intelephense language server. lsp-intelephense-storage-path # Default: ~/.emacs.d/lsp-cache Optional absolute path to storage dir. lsp-intelephense-clear-cache # Default: nil Optional flag to clear server state. lsp-intelephense-multi-root # Default: t Flag to control if the server supports multi-root projects lsp-intelephense-server-command # Default: (intelephense --stdio) Command to start Intelephense.","title":"PHP (intelephense)"},{"location":"page/lsp-intelephense/#phprecommended","text":"","title":"PHP(recommended)"},{"location":"page/lsp-intelephense/#server","text":"For information about the LSP server, check the intelephense .","title":"Server"},{"location":"page/lsp-intelephense/#installation","text":"npm i intelephense -g","title":"Installation"},{"location":"page/lsp-intelephense/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-intelephense/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-intelephense/#lsp-intelephense-files-max-size","text":"Default: 1000000 Maximum file size in bytes.","title":"lsp-intelephense-files-max-size"},{"location":"page/lsp-intelephense/#lsp-intelephense-files-associations","text":"Default: [*.php *.phtml] Configure glob patterns to make files available for language server features.","title":"lsp-intelephense-files-associations"},{"location":"page/lsp-intelephense/#lsp-intelephense-files-exclude","text":"Default: [**/.git/** **/.svn/** **/.hg/** **/CVS/** **/.DS_Store/** **/node_modules/** **/bower_components/** **/vendor/**/{Test,test,Tests,tests}/**] Configure glob patterns to exclude certain files and folders from all language server features.","title":"lsp-intelephense-files-exclude"},{"location":"page/lsp-intelephense/#lsp-intelephense-stubs","text":"Default: [apache bcmath bz2 calendar com_dotnet Core ctype curl date dba dom enchant exif fileinfo filter fpm ftp gd hash iconv imap interbase intl json ldap libxml mbstring mcrypt meta mssql mysqli oci8 odbc openssl pcntl pcre PDO pdo_ibm pdo_mysql pdo_pgsql pdo_sqlite pgsql Phar posix pspell readline recode Reflection regex session shmop SimpleXML snmp soap sockets sodium SPL sqlite3 standard superglobals sybase sysvmsg sysvsem sysvshm tidy tokenizer wddx xml xmlreader xmlrpc xmlwriter Zend OPcache zip zlib] Configure stub files for built in symbols and common extensions. The default setting includes PHP core and all bundled extensions.","title":"lsp-intelephense-stubs"},{"location":"page/lsp-intelephense/#lsp-intelephense-completion-insert-use-declaration","text":"Default: t Use declarations will be automatically inserted for namespaced classes, traits, interfaces, functions, and constants.","title":"lsp-intelephense-completion-insert-use-declaration"},{"location":"page/lsp-intelephense/#lsp-intelephense-completion-fully-qualify-global-constants-and-functions","text":"Default: nil Global namespace constants and functions will be fully qualified (prefixed with a backslash).","title":"lsp-intelephense-completion-fully-qualify-global-constants-and-functions"},{"location":"page/lsp-intelephense/#lsp-intelephense-completion-trigger-parameter-hints","text":"Default: t Method and function completions will include parentheses and trigger parameter hints.","title":"lsp-intelephense-completion-trigger-parameter-hints"},{"location":"page/lsp-intelephense/#lsp-intelephense-completion-max-items","text":"Default: 100 The maximum number of completion items returned per request.","title":"lsp-intelephense-completion-max-items"},{"location":"page/lsp-intelephense/#lsp-intelephense-format-enable","text":"Default: t Enables formatting.","title":"lsp-intelephense-format-enable"},{"location":"page/lsp-intelephense/#lsp-intelephense-licence-key","text":"Default: nil Enter your intelephense licence key here to access premium features.","title":"lsp-intelephense-licence-key"},{"location":"page/lsp-intelephense/#lsp-intelephense-telemetry-enabled","text":"Default: nil Anonymous usage and crash data will be sent to Azure Application Insights.","title":"lsp-intelephense-telemetry-enabled"},{"location":"page/lsp-intelephense/#lsp-intelephense-rename-exclude","text":"Default: [**/vendor/**] Glob patterns to exclude files and folders from having symbols renamed. Rename operation will fail if references and/or definitions are found in excluded files/folders.","title":"lsp-intelephense-rename-exclude"},{"location":"page/lsp-intelephense/#lsp-intelephense-trace-server","text":"Default: off Traces the communication between VSCode and the intelephense language server.","title":"lsp-intelephense-trace-server"},{"location":"page/lsp-intelephense/#lsp-intelephense-storage-path","text":"Default: ~/.emacs.d/lsp-cache Optional absolute path to storage dir.","title":"lsp-intelephense-storage-path"},{"location":"page/lsp-intelephense/#lsp-intelephense-clear-cache","text":"Default: nil Optional flag to clear server state.","title":"lsp-intelephense-clear-cache"},{"location":"page/lsp-intelephense/#lsp-intelephense-multi-root","text":"Default: t Flag to control if the server supports multi-root projects","title":"lsp-intelephense-multi-root"},{"location":"page/lsp-intelephense/#lsp-intelephense-server-command","text":"Default: (intelephense --stdio) Command to start Intelephense.","title":"lsp-intelephense-server-command"},{"location":"page/lsp-json/","text":"Json # Server # For information about the LSP server, check the vscode-json-languageserver . Installation # Automatic or manual by npm i -g vscode-json-languageserver Debugger: Not available # Available configurations # lsp-json-schemas # Default: nil Associate schemas to JSON files in the current project lsp-http-proxy # Default: nil The URL of the proxy server to use when fetching schema. lsp-http-proxyStrictSSL # Default: t The URL of the proxy server to use when fetching schema.","title":"Json"},{"location":"page/lsp-json/#json","text":"","title":"Json"},{"location":"page/lsp-json/#server","text":"For information about the LSP server, check the vscode-json-languageserver .","title":"Server"},{"location":"page/lsp-json/#installation","text":"Automatic or manual by npm i -g vscode-json-languageserver","title":"Installation"},{"location":"page/lsp-json/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-json/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-json/#lsp-json-schemas","text":"Default: nil Associate schemas to JSON files in the current project","title":"lsp-json-schemas"},{"location":"page/lsp-json/#lsp-http-proxy","text":"Default: nil The URL of the proxy server to use when fetching schema.","title":"lsp-http-proxy"},{"location":"page/lsp-json/#lsp-http-proxystrictssl","text":"Default: t The URL of the proxy server to use when fetching schema.","title":"lsp-http-proxyStrictSSL"},{"location":"page/lsp-julia/","text":"Julia # Server # For information about the LSP server, check the lsp-julia . Installation # For instruction on how to install, check here . Debugger: Not available # Available configurations #","title":"Julia"},{"location":"page/lsp-julia/#julia","text":"","title":"Julia"},{"location":"page/lsp-julia/#server","text":"For information about the LSP server, check the lsp-julia .","title":"Server"},{"location":"page/lsp-julia/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-julia/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-julia/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-kotlin/","text":"Kotlin # Server # For information about the LSP server, check the kotlin-language-server . Installation # For instruction on how to install, check here . Debugger: Not available # Available configurations # lsp-clients-kotlin-server-executable # Default: kotlin-language-server The kotlin-language-server executable to use. Leave as just the executable name to use the default behavior of finding the executable with \u2018exec-path\u2019. lsp-kotlin-trace-server # Default: off Traces the communication between VSCode and the Kotlin language server. lsp-kotlin-compiler-jvm-target # Default: 1.8 Specifies the JVM target, e.g. \"1.6\" or \"1.8\" lsp-kotlin-linting-debounce-time # Default: 250 [DEBUG] Specifies the debounce time limit. Lower to increase responsiveness at the cost of possible stability issues. lsp-kotlin-completion-snippets-enabled # Default: t Specifies whether code completion should provide snippets (true) or plain-text items (false). lsp-kotlin-debug-adapter-enabled # Default: t [Recommended] Specifies whether the debug adapter should be used. When enabled a debugger for Kotlin will be available. lsp-kotlin-debug-adapter-path # Default: `` Optionally a custom path to the debug adapter executable. lsp-kotlin-external-sources-use-kls-scheme # Default: t [Recommended] Specifies whether URIs inside JARs should be represented using the \u2019kls\u2019-scheme. lsp-kotlin-external-sources-auto-convert-to-kotlin # Default: t Specifies whether decompiled/external classes should be auto-converted to Kotlin.","title":"Kotlin"},{"location":"page/lsp-kotlin/#kotlin","text":"","title":"Kotlin"},{"location":"page/lsp-kotlin/#server","text":"For information about the LSP server, check the kotlin-language-server .","title":"Server"},{"location":"page/lsp-kotlin/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-kotlin/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-kotlin/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-kotlin/#lsp-clients-kotlin-server-executable","text":"Default: kotlin-language-server The kotlin-language-server executable to use. Leave as just the executable name to use the default behavior of finding the executable with \u2018exec-path\u2019.","title":"lsp-clients-kotlin-server-executable"},{"location":"page/lsp-kotlin/#lsp-kotlin-trace-server","text":"Default: off Traces the communication between VSCode and the Kotlin language server.","title":"lsp-kotlin-trace-server"},{"location":"page/lsp-kotlin/#lsp-kotlin-compiler-jvm-target","text":"Default: 1.8 Specifies the JVM target, e.g. \"1.6\" or \"1.8\"","title":"lsp-kotlin-compiler-jvm-target"},{"location":"page/lsp-kotlin/#lsp-kotlin-linting-debounce-time","text":"Default: 250 [DEBUG] Specifies the debounce time limit. Lower to increase responsiveness at the cost of possible stability issues.","title":"lsp-kotlin-linting-debounce-time"},{"location":"page/lsp-kotlin/#lsp-kotlin-completion-snippets-enabled","text":"Default: t Specifies whether code completion should provide snippets (true) or plain-text items (false).","title":"lsp-kotlin-completion-snippets-enabled"},{"location":"page/lsp-kotlin/#lsp-kotlin-debug-adapter-enabled","text":"Default: t [Recommended] Specifies whether the debug adapter should be used. When enabled a debugger for Kotlin will be available.","title":"lsp-kotlin-debug-adapter-enabled"},{"location":"page/lsp-kotlin/#lsp-kotlin-debug-adapter-path","text":"Default: `` Optionally a custom path to the debug adapter executable.","title":"lsp-kotlin-debug-adapter-path"},{"location":"page/lsp-kotlin/#lsp-kotlin-external-sources-use-kls-scheme","text":"Default: t [Recommended] Specifies whether URIs inside JARs should be represented using the \u2019kls\u2019-scheme.","title":"lsp-kotlin-external-sources-use-kls-scheme"},{"location":"page/lsp-kotlin/#lsp-kotlin-external-sources-auto-convert-to-kotlin","text":"Default: t Specifies whether decompiled/external classes should be auto-converted to Kotlin.","title":"lsp-kotlin-external-sources-auto-convert-to-kotlin"},{"location":"page/lsp-nim/","text":"Nim # Server # For information about the LSP server, check the nimlsp . Installation # nimble install nimlsp Debugger: Not available # Available configurations #","title":"Nim"},{"location":"page/lsp-nim/#nim","text":"","title":"Nim"},{"location":"page/lsp-nim/#server","text":"For information about the LSP server, check the nimlsp .","title":"Server"},{"location":"page/lsp-nim/#installation","text":"nimble install nimlsp","title":"Installation"},{"location":"page/lsp-nim/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-nim/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-ocalm-lsp-server/","text":"OCaml # Server # For information about the LSP server, check the ocaml-lsp-server . Installation # For instruction on how to install, check here . Debugger: Not available # Available configurations #","title":"OCaml (icaml-lsp)"},{"location":"page/lsp-ocalm-lsp-server/#ocaml","text":"","title":"OCaml"},{"location":"page/lsp-ocalm-lsp-server/#server","text":"For information about the LSP server, check the ocaml-lsp-server .","title":"Server"},{"location":"page/lsp-ocalm-lsp-server/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-ocalm-lsp-server/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-ocalm-lsp-server/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-ocaml/","text":"OCaml # Server # For information about the LSP server, check the ocaml-language-server . Installation # For instruction on how to install, check here . Debugger: Not available # Available configurations # lsp-ocaml-lang-server-command # Default: (ocaml-language-server --stdio) Command to start ocaml-language-server. lsp-ocaml-lsp-server-command # Default: (ocamllsp) Command to start ocaml-language-server.","title":"OCaml (ocaml)"},{"location":"page/lsp-ocaml/#ocaml","text":"","title":"OCaml"},{"location":"page/lsp-ocaml/#server","text":"For information about the LSP server, check the ocaml-language-server .","title":"Server"},{"location":"page/lsp-ocaml/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-ocaml/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-ocaml/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-ocaml/#lsp-ocaml-lang-server-command","text":"Default: (ocaml-language-server --stdio) Command to start ocaml-language-server.","title":"lsp-ocaml-lang-server-command"},{"location":"page/lsp-ocaml/#lsp-ocaml-lsp-server-command","text":"Default: (ocamllsp) Command to start ocaml-language-server.","title":"lsp-ocaml-lsp-server-command"},{"location":"page/lsp-org/","text":"Literate programming using LSP and org-mode(alpha) # lsp-mode provides experimental support for running the language servers inside of org-mode source blocks. lsp-mode is achieving this by obtaining the information about the source block from the source block header(language + :tangle ) then translating the point to the LSP positions back and forth so the language server thinks that Emacs has opened the original file. In order that to work the files has to be present on the disk as well because the server expects to find them. Here it is a sample source block: #+BEGIN_SRC python :tangle \"python.py\" print \"Hello!\" #+END_SRC Demo # Commands # lsp-org start lsp-mode in source buffer. Must be executed with cursor being source block. lsp-virtual-buffer-disconnect turn off lsp-mode . What works # lsp-mode core features (finding references, going to definitions, completion, lenses, highlighting, etc) company-mode flycheck lsp-treemacs-symbols lsp-treemacs-errors-list Known limitations # Incremental updates are performed by sending the whole buffer each time(they simulate full updates). Deleting content that spans across the source block and the content of the org document is not handled. Opening and editing the actual file from the disk might cause undefined behavour because the server expects file to be open only once. What does not work # dap-mode lsp-ui flymake (?) What's next # Finishing the virtual buffers API . lsp-ui support dap-mode support markdown-mode integration","title":"Literate programming using LSP and org-mode(alpha)"},{"location":"page/lsp-org/#literate-programming-using-lsp-and-org-modealpha","text":"lsp-mode provides experimental support for running the language servers inside of org-mode source blocks. lsp-mode is achieving this by obtaining the information about the source block from the source block header(language + :tangle ) then translating the point to the LSP positions back and forth so the language server thinks that Emacs has opened the original file. In order that to work the files has to be present on the disk as well because the server expects to find them. Here it is a sample source block: #+BEGIN_SRC python :tangle \"python.py\" print \"Hello!\" #+END_SRC","title":"Literate programming using LSP and org-mode(alpha)"},{"location":"page/lsp-org/#demo","text":"","title":"Demo"},{"location":"page/lsp-org/#commands","text":"lsp-org start lsp-mode in source buffer. Must be executed with cursor being source block. lsp-virtual-buffer-disconnect turn off lsp-mode .","title":"Commands"},{"location":"page/lsp-org/#what-works","text":"lsp-mode core features (finding references, going to definitions, completion, lenses, highlighting, etc) company-mode flycheck lsp-treemacs-symbols lsp-treemacs-errors-list","title":"What works"},{"location":"page/lsp-org/#known-limitations","text":"Incremental updates are performed by sending the whole buffer each time(they simulate full updates). Deleting content that spans across the source block and the content of the org document is not handled. Opening and editing the actual file from the disk might cause undefined behavour because the server expects file to be open only once.","title":"Known limitations"},{"location":"page/lsp-org/#what-does-not-work","text":"dap-mode lsp-ui flymake (?)","title":"What does not work"},{"location":"page/lsp-org/#whats-next","text":"Finishing the virtual buffers API . lsp-ui support dap-mode support markdown-mode integration","title":"What's next"},{"location":"page/lsp-pascal/","text":"Pascal/Object Pascal # Server # For information about the LSP server, check the pascal-language-server . Installation # For instruction on how to install, check here . Debugger: Not available # Available configurations #","title":"Pascal/Object Pascal"},{"location":"page/lsp-pascal/#pascalobject-pascal","text":"","title":"Pascal/Object Pascal"},{"location":"page/lsp-pascal/#server","text":"For information about the LSP server, check the pascal-language-server .","title":"Server"},{"location":"page/lsp-pascal/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-pascal/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-pascal/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-perl/","text":"Perl # Server # For information about the LSP server, check the Perl::LanguageServer . Installation # cpanm Perl::LanguageServer Debugger: Not available # Available configurations # lsp-perl-language-server-path # Default: perl Path to perl interpreter. lsp-perl-language-server-port # Default: 13603 Choose listen port. lsp-perl-language-server-client-version # Default: 2.1.0 Choose client version.","title":"Perl"},{"location":"page/lsp-perl/#perl","text":"","title":"Perl"},{"location":"page/lsp-perl/#server","text":"For information about the LSP server, check the Perl::LanguageServer .","title":"Server"},{"location":"page/lsp-perl/#installation","text":"cpanm Perl::LanguageServer","title":"Installation"},{"location":"page/lsp-perl/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-perl/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-perl/#lsp-perl-language-server-path","text":"Default: perl Path to perl interpreter.","title":"lsp-perl-language-server-path"},{"location":"page/lsp-perl/#lsp-perl-language-server-port","text":"Default: 13603 Choose listen port.","title":"lsp-perl-language-server-port"},{"location":"page/lsp-perl/#lsp-perl-language-server-client-version","text":"Default: 2.1.0 Choose client version.","title":"lsp-perl-language-server-client-version"},{"location":"page/lsp-php/","text":"PHP # Server # For information about the LSP server, check the php-language-server . Installation # For instruction on how to install, check here . Debugger: Yes # Available configurations # lsp-clients-php-server-command # Default: (php /home/runner/.composer/vendor/felixfbecker/language-server/bin/php-language-server.php) Install directory for php-language-server.","title":"PHP (felixbecker)"},{"location":"page/lsp-php/#php","text":"","title":"PHP"},{"location":"page/lsp-php/#server","text":"For information about the LSP server, check the php-language-server .","title":"Server"},{"location":"page/lsp-php/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-php/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-php/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-php/#lsp-clients-php-server-command","text":"Default: (php /home/runner/.composer/vendor/felixfbecker/language-server/bin/php-language-server.php) Install directory for php-language-server.","title":"lsp-clients-php-server-command"},{"location":"page/lsp-purescript/","text":"PureScript # Server # For information about the LSP server, check the purescript-language-server . Installation # npm i purescript-language-server Debugger: Not available # Available configurations # lsp-purescript-server-executable # Default: purescript-language-server Arguments to pass to the server. lsp-purescript-server-args # Default: (--stdio) Arguments to pass to the server.","title":"PureScript"},{"location":"page/lsp-purescript/#purescript","text":"","title":"PureScript"},{"location":"page/lsp-purescript/#server","text":"For information about the LSP server, check the purescript-language-server .","title":"Server"},{"location":"page/lsp-purescript/#installation","text":"npm i purescript-language-server","title":"Installation"},{"location":"page/lsp-purescript/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-purescript/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-purescript/#lsp-purescript-server-executable","text":"Default: purescript-language-server Arguments to pass to the server.","title":"lsp-purescript-server-executable"},{"location":"page/lsp-purescript/#lsp-purescript-server-args","text":"Default: (--stdio) Arguments to pass to the server.","title":"lsp-purescript-server-args"},{"location":"page/lsp-pwsh/","text":"Powershell # Server # For information about the LSP server, check the PowerShellEditorServices . Installation # Automatic Debugger: Yes # Available configurations # lsp-pwsh-help-completion # Default: BlockComment Controls the comment-based help completion behavior triggered by typing \u2019##\u2019. Set the generated help style with \u2019BlockComment\u2019 or \u2019LineComment\u2019. Disable the feature with \u2019Disabled\u2019. lsp-pwsh-script-analysis-enable # Default: t Enables real-time script analysis from PowerShell Script Analyzer. Uses the newest installed version of the PSScriptAnalyzer module or the version bundled with this extension, if it is newer. lsp-pwsh-script-analysis-settings-path # Default: `` Specifies the path to a PowerShell Script Analyzer settings file. To override the default settings for all projects, enter an absolute path, or enter a path relative to your workspace. lsp-pwsh-code-folding-enable # Default: t Enables syntax based code folding. When disabled, the default indentation based code folding is used. lsp-pwsh-code-folding-show-last-line # Default: t Shows the last line of a folded section. Similar to the default VSCode folding style. When disabled, the entire folded region is hidden. lsp-pwsh-code-formatting-preset # Default: Custom Sets the codeformatting options to follow the given indent style. Sets in a way that is compatible with PowerShell syntax. For more information about the brace styles please refer to https://github.com/PoshCode/PowerShellPracticeAndStyle/issues/81. lsp-pwsh-code-formatting-open-brace-on-same-line # Default: t Places open brace on the same line as its associated statement. lsp-pwsh-code-formatting-new-line-after-open-brace # Default: t Adds a newline (line break) after an open brace. lsp-pwsh-code-formatting-new-line-after-close-brace # Default: t Adds a newline (line break) after a closing brace. lsp-pwsh-code-formatting-pipeline-indentation-style # Default: NoIndentation Multi-line pipeline style settings. lsp-pwsh-code-formatting-whitespace-before-open-brace # Default: t Adds a space between a keyword and its associated scriptblock expression. lsp-pwsh-code-formatting-whitespace-before-open-paren # Default: t Adds a space between a keyword (if, elseif, while, switch, etc) and its associated conditional expression. lsp-pwsh-code-formatting-whitespace-around-operator # Default: t Adds spaces before and after an operator (\u2019=\u2019, \u2019+\u2019, \u2019-\u2019, etc.). lsp-pwsh-code-formatting-whitespace-after-separator # Default: t Adds a space after a separator (\u2019,\u2019 and \u2019;\u2019). lsp-pwsh-code-formatting-whitespace-inside-brace # Default: t Adds a space after an opening brace (\u2019{\u2019) and before a closing brace (\u2019}\u2019). lsp-pwsh-code-formatting-whitespace-around-pipe # Default: t Adds a space before and after the pipeline operator (\u2019|\u2019). lsp-pwsh-code-formatting-ignore-one-line-block # Default: t Does not reformat one-line code blocks, such as \"if (...) {...} else {...}\". lsp-pwsh-code-formatting-align-property-value-pairs # Default: t Align assignment statements in a hashtable or a DSC Configuration. lsp-pwsh-code-formatting-use-correct-casing # Default: nil Use correct casing for cmdlets. lsp-pwsh-developer-editor-services-log-level # Default: Normal Sets the log level for the PowerShell Editor Services host executable. Valid values are \u2019Diagnostic\u2019, \u2019Verbose\u2019, \u2019Normal\u2019, \u2019Warning\u2019, and \u2019Error\u2019 lsp-pwsh-developer-editor-services-wait-for-debugger # Default: nil Launches the language service with the /waitForDebugger flag to force it to wait for a .NET debugger to attach before proceeding. lsp-pwsh-developer-feature-flags # Default: nil An array of strings that enable experimental features in the PowerShell extension. lsp-pwsh-ext-path # Default: /home/runner/.emacs.d/.cache/lsp/pwsh The path to powershell vscode extension. lsp-pwsh-exe # Default: /usr/bin/pwsh PowerShell executable. lsp-pwsh-dir # Default: /home/runner/.emacs.d/.cache/lsp/pwsh/PowerShellEditorServices Path to PowerShellEditorServices without last slash. lsp-pwsh-github-asset-url # Default: https://github.com/%s/%s/releases/latest/download/%s GitHub latest asset template url.","title":"Powershell"},{"location":"page/lsp-pwsh/#powershell","text":"","title":"Powershell"},{"location":"page/lsp-pwsh/#server","text":"For information about the LSP server, check the PowerShellEditorServices .","title":"Server"},{"location":"page/lsp-pwsh/#installation","text":"Automatic","title":"Installation"},{"location":"page/lsp-pwsh/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-pwsh/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-pwsh/#lsp-pwsh-help-completion","text":"Default: BlockComment Controls the comment-based help completion behavior triggered by typing \u2019##\u2019. Set the generated help style with \u2019BlockComment\u2019 or \u2019LineComment\u2019. Disable the feature with \u2019Disabled\u2019.","title":"lsp-pwsh-help-completion"},{"location":"page/lsp-pwsh/#lsp-pwsh-script-analysis-enable","text":"Default: t Enables real-time script analysis from PowerShell Script Analyzer. Uses the newest installed version of the PSScriptAnalyzer module or the version bundled with this extension, if it is newer.","title":"lsp-pwsh-script-analysis-enable"},{"location":"page/lsp-pwsh/#lsp-pwsh-script-analysis-settings-path","text":"Default: `` Specifies the path to a PowerShell Script Analyzer settings file. To override the default settings for all projects, enter an absolute path, or enter a path relative to your workspace.","title":"lsp-pwsh-script-analysis-settings-path"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-folding-enable","text":"Default: t Enables syntax based code folding. When disabled, the default indentation based code folding is used.","title":"lsp-pwsh-code-folding-enable"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-folding-show-last-line","text":"Default: t Shows the last line of a folded section. Similar to the default VSCode folding style. When disabled, the entire folded region is hidden.","title":"lsp-pwsh-code-folding-show-last-line"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-preset","text":"Default: Custom Sets the codeformatting options to follow the given indent style. Sets in a way that is compatible with PowerShell syntax. For more information about the brace styles please refer to https://github.com/PoshCode/PowerShellPracticeAndStyle/issues/81.","title":"lsp-pwsh-code-formatting-preset"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-open-brace-on-same-line","text":"Default: t Places open brace on the same line as its associated statement.","title":"lsp-pwsh-code-formatting-open-brace-on-same-line"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-new-line-after-open-brace","text":"Default: t Adds a newline (line break) after an open brace.","title":"lsp-pwsh-code-formatting-new-line-after-open-brace"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-new-line-after-close-brace","text":"Default: t Adds a newline (line break) after a closing brace.","title":"lsp-pwsh-code-formatting-new-line-after-close-brace"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-pipeline-indentation-style","text":"Default: NoIndentation Multi-line pipeline style settings.","title":"lsp-pwsh-code-formatting-pipeline-indentation-style"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-whitespace-before-open-brace","text":"Default: t Adds a space between a keyword and its associated scriptblock expression.","title":"lsp-pwsh-code-formatting-whitespace-before-open-brace"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-whitespace-before-open-paren","text":"Default: t Adds a space between a keyword (if, elseif, while, switch, etc) and its associated conditional expression.","title":"lsp-pwsh-code-formatting-whitespace-before-open-paren"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-whitespace-around-operator","text":"Default: t Adds spaces before and after an operator (\u2019=\u2019, \u2019+\u2019, \u2019-\u2019, etc.).","title":"lsp-pwsh-code-formatting-whitespace-around-operator"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-whitespace-after-separator","text":"Default: t Adds a space after a separator (\u2019,\u2019 and \u2019;\u2019).","title":"lsp-pwsh-code-formatting-whitespace-after-separator"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-whitespace-inside-brace","text":"Default: t Adds a space after an opening brace (\u2019{\u2019) and before a closing brace (\u2019}\u2019).","title":"lsp-pwsh-code-formatting-whitespace-inside-brace"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-whitespace-around-pipe","text":"Default: t Adds a space before and after the pipeline operator (\u2019|\u2019).","title":"lsp-pwsh-code-formatting-whitespace-around-pipe"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-ignore-one-line-block","text":"Default: t Does not reformat one-line code blocks, such as \"if (...) {...} else {...}\".","title":"lsp-pwsh-code-formatting-ignore-one-line-block"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-align-property-value-pairs","text":"Default: t Align assignment statements in a hashtable or a DSC Configuration.","title":"lsp-pwsh-code-formatting-align-property-value-pairs"},{"location":"page/lsp-pwsh/#lsp-pwsh-code-formatting-use-correct-casing","text":"Default: nil Use correct casing for cmdlets.","title":"lsp-pwsh-code-formatting-use-correct-casing"},{"location":"page/lsp-pwsh/#lsp-pwsh-developer-editor-services-log-level","text":"Default: Normal Sets the log level for the PowerShell Editor Services host executable. Valid values are \u2019Diagnostic\u2019, \u2019Verbose\u2019, \u2019Normal\u2019, \u2019Warning\u2019, and \u2019Error\u2019","title":"lsp-pwsh-developer-editor-services-log-level"},{"location":"page/lsp-pwsh/#lsp-pwsh-developer-editor-services-wait-for-debugger","text":"Default: nil Launches the language service with the /waitForDebugger flag to force it to wait for a .NET debugger to attach before proceeding.","title":"lsp-pwsh-developer-editor-services-wait-for-debugger"},{"location":"page/lsp-pwsh/#lsp-pwsh-developer-feature-flags","text":"Default: nil An array of strings that enable experimental features in the PowerShell extension.","title":"lsp-pwsh-developer-feature-flags"},{"location":"page/lsp-pwsh/#lsp-pwsh-ext-path","text":"Default: /home/runner/.emacs.d/.cache/lsp/pwsh The path to powershell vscode extension.","title":"lsp-pwsh-ext-path"},{"location":"page/lsp-pwsh/#lsp-pwsh-exe","text":"Default: /usr/bin/pwsh PowerShell executable.","title":"lsp-pwsh-exe"},{"location":"page/lsp-pwsh/#lsp-pwsh-dir","text":"Default: /home/runner/.emacs.d/.cache/lsp/pwsh/PowerShellEditorServices Path to PowerShellEditorServices without last slash.","title":"lsp-pwsh-dir"},{"location":"page/lsp-pwsh/#lsp-pwsh-github-asset-url","text":"Default: https://github.com/%s/%s/releases/latest/download/%s GitHub latest asset template url.","title":"lsp-pwsh-github-asset-url"},{"location":"page/lsp-pyls/","text":"Python # Server # For information about the LSP server, check the pyls . Installation # pip install \u2018python-language-server[all]\u2019 Debugger: Yes # Available configurations # lsp-clients-python-library-directories # Default: (/usr/) List of directories which will be considered to be libraries. lsp-pyls-server-command # Default: (pyls) Command to start pyls. lsp-pyls-configuration-sources # Default: [pycodestyle] List of configuration sources to use. lsp-pyls-plugins-jedi-completion-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-jedi-completion-include-params # Default: t Auto-completes methods and classes with tabstops for each parameter. lsp-pyls-plugins-jedi-definition-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-jedi-definition-follow-imports # Default: t The goto call will follow imports. lsp-pyls-plugins-jedi-definition-follow-builtin-imports # Default: t If follow_imports is True will decide if it follow builtin imports. lsp-pyls-plugins-jedi-hover-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-jedi-references-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-jedi-signature-help-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-jedi-symbols-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-jedi-symbols-all-scopes # Default: t If True lists the names of all scopes instead of only the module namespace. lsp-pyls-plugins-mccabe-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-mccabe-threshold # Default: 15 The minimum threshold that triggers warnings about cyclomatic complexity. lsp-pyls-plugins-preload-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-preload-modules # Default: nil List of modules to import on startup lsp-pyls-plugins-pylint-enabled # Default: nil Enable or disable the plugin. lsp-pyls-plugins-pylint-args # Default: [] Arguments, passed to pylint lsp-pyls-plugins-pycodestyle-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-pycodestyle-exclude # Default: nil Exclude files or directories which match these patterns. lsp-pyls-plugins-pycodestyle-filename # Default: nil When parsing directories, only check filenames matching these patterns. lsp-pyls-plugins-pycodestyle-select # Default: nil Select errors and warnings lsp-pyls-plugins-pycodestyle-ignore # Default: nil Ignore errors and warnings lsp-pyls-plugins-pycodestyle-hang-closing # Default: nil Hang closing bracket instead of matching indentation of opening bracket\u2019s line. lsp-pyls-plugins-pycodestyle-max-line-length # Default: nil Set maximum allowed line length. lsp-pyls-plugins-pydocstyle-enabled # Default: nil Enable or disable the plugin. lsp-pyls-plugins-pydocstyle-convention # Default: nil Choose the basic list of checked errors by specifying an existing convention. lsp-pyls-plugins-pydocstyle-add-ignore # Default: nil Ignore errors and warnings in addition to the specified convention. lsp-pyls-plugins-pydocstyle-add-select # Default: nil Select errors and warnings in addition to the specified convention. lsp-pyls-plugins-pydocstyle-ignore # Default: nil Ignore errors and warnings lsp-pyls-plugins-pydocstyle-select # Default: nil Select errors and warnings lsp-pyls-plugins-pydocstyle-match # Default: (?!test_).*\\.py Check only files that exactly match the given regular expression; default is to match files that don\u2019t start with \u2019test_\u2019 but end with \u2019.py\u2019. lsp-pyls-plugins-pydocstyle-match-dir # Default: [^\\.].* Search only dirs that exactly match the given regular expression; default is to match dirs which do not begin with a dot. lsp-pyls-plugins-pyflakes-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-rope-completion-enabled # Default: nil Enable or disable the plugin. lsp-pyls-plugins-autopep8-enabled # Default: t Enable or disable the plugin. lsp-pyls-plugins-yapf-enabled # Default: nil Enable or disable the plugin. lsp-pyls-rope-extension-modules # Default: nil Builtin and c-extension modules that are allowed to be imported and inspected by rope. lsp-pyls-rope-rope-folder # Default: nil The name of the folder in which rope stores project configurations and data. Pass \u2018nil\u2018 for not using such a folder at all. lsp-pyls-plugins-flake8-enabled # Default: nil Enable or disable the plugin. lsp-pyls-plugins-flake8-exclude # Default: nil List of glob patterns to exclude from checks. lsp-pyls-plugins-flake8-filename # Default: nil List of glob patterns to include for checks. lsp-pyls-plugins-flake8-hang-closing # Default: nil Toggle whether pycodestyle should enforce matching the indentation of the opening bracket\u2019s line. When you specify this, it will prefer that you hang the closing bracket rather than match the indentation. lsp-pyls-plugins-flake8-ignore # Default: nil A list of codes to ignore. lsp-pyls-plugins-flake8-max-line-length # Default: nil Set the maximum length that any line (with some exceptions) may be. Exceptions include lines that are either strings or comments which are entirely URLs. lsp-pyls-plugins-flake8-select # Default: nil Specify the list of error codes you wish Flake8 to report. Similarly to \u2018lsp-pyls-plugins-flake8-ignore\u2019. You can specify a portion of an error code to get all that start with that string. For example, you can use E, E4, E43, and E431 lsp-pyls-plugins-flake8-config # Default: nil A path to a config file that will be the only config file read and used. This will cause Flake8 to ignore all other config files that exist. NOTE: other parameters as \u2018lsp-pyls-plugins-flake8-max-line-length\u2019 take precedence over parameters referenced in config. lsp-pyls-plugins-jedi-use-pyenv-environment # Default: nil If enabled, pass the environment got by pyenv to jedi lsp-pyls-plugins-jedi-environment # Default: nil Specify the environment that jedi runs on where /bin/python should be the python executable. This option will be prioritized over \u2018lsp-pyls-plugins-jedi-use-pyenv-environment\u2019. lsp-pyls-plugins-jedi-completion-fuzzy # Default: nil If enabled, uses fuzzy completion in jedi. Requires pyls >= 0.32.0 Can hit performance, as well as lsp-mode implements its own fuzzy search on completion items. lsp-pyls-plugins-jedi-completion-include-class-objects # Default: t If enabled, adds class objects to completion in order to avoid snippet with init args. Has no effect if \u2018lsp-pyls-plugins-jedi-completion-include-params\u2019 is disabled. Requires pyls >= 0.33.0 lsp-pyls-rename-backend # Default: jedi Choose renaming backend. Jedi is preferred but only works for python >= 3.6 and pyls >= 0.32.0 Beware that Jedi is lazy and doesn\u2019t scan the whole project. So it will rename only references it can find.","title":"Python"},{"location":"page/lsp-pyls/#python","text":"","title":"Python"},{"location":"page/lsp-pyls/#server","text":"For information about the LSP server, check the pyls .","title":"Server"},{"location":"page/lsp-pyls/#installation","text":"pip install \u2018python-language-server[all]\u2019","title":"Installation"},{"location":"page/lsp-pyls/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-pyls/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-pyls/#lsp-clients-python-library-directories","text":"Default: (/usr/) List of directories which will be considered to be libraries.","title":"lsp-clients-python-library-directories"},{"location":"page/lsp-pyls/#lsp-pyls-server-command","text":"Default: (pyls) Command to start pyls.","title":"lsp-pyls-server-command"},{"location":"page/lsp-pyls/#lsp-pyls-configuration-sources","text":"Default: [pycodestyle] List of configuration sources to use.","title":"lsp-pyls-configuration-sources"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-completion-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-jedi-completion-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-completion-include-params","text":"Default: t Auto-completes methods and classes with tabstops for each parameter.","title":"lsp-pyls-plugins-jedi-completion-include-params"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-definition-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-jedi-definition-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-definition-follow-imports","text":"Default: t The goto call will follow imports.","title":"lsp-pyls-plugins-jedi-definition-follow-imports"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-definition-follow-builtin-imports","text":"Default: t If follow_imports is True will decide if it follow builtin imports.","title":"lsp-pyls-plugins-jedi-definition-follow-builtin-imports"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-hover-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-jedi-hover-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-references-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-jedi-references-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-signature-help-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-jedi-signature-help-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-symbols-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-jedi-symbols-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-symbols-all-scopes","text":"Default: t If True lists the names of all scopes instead of only the module namespace.","title":"lsp-pyls-plugins-jedi-symbols-all-scopes"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-mccabe-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-mccabe-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-mccabe-threshold","text":"Default: 15 The minimum threshold that triggers warnings about cyclomatic complexity.","title":"lsp-pyls-plugins-mccabe-threshold"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-preload-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-preload-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-preload-modules","text":"Default: nil List of modules to import on startup","title":"lsp-pyls-plugins-preload-modules"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pylint-enabled","text":"Default: nil Enable or disable the plugin.","title":"lsp-pyls-plugins-pylint-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pylint-args","text":"Default: [] Arguments, passed to pylint","title":"lsp-pyls-plugins-pylint-args"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pycodestyle-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-pycodestyle-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pycodestyle-exclude","text":"Default: nil Exclude files or directories which match these patterns.","title":"lsp-pyls-plugins-pycodestyle-exclude"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pycodestyle-filename","text":"Default: nil When parsing directories, only check filenames matching these patterns.","title":"lsp-pyls-plugins-pycodestyle-filename"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pycodestyle-select","text":"Default: nil Select errors and warnings","title":"lsp-pyls-plugins-pycodestyle-select"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pycodestyle-ignore","text":"Default: nil Ignore errors and warnings","title":"lsp-pyls-plugins-pycodestyle-ignore"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pycodestyle-hang-closing","text":"Default: nil Hang closing bracket instead of matching indentation of opening bracket\u2019s line.","title":"lsp-pyls-plugins-pycodestyle-hang-closing"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pycodestyle-max-line-length","text":"Default: nil Set maximum allowed line length.","title":"lsp-pyls-plugins-pycodestyle-max-line-length"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pydocstyle-enabled","text":"Default: nil Enable or disable the plugin.","title":"lsp-pyls-plugins-pydocstyle-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pydocstyle-convention","text":"Default: nil Choose the basic list of checked errors by specifying an existing convention.","title":"lsp-pyls-plugins-pydocstyle-convention"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pydocstyle-add-ignore","text":"Default: nil Ignore errors and warnings in addition to the specified convention.","title":"lsp-pyls-plugins-pydocstyle-add-ignore"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pydocstyle-add-select","text":"Default: nil Select errors and warnings in addition to the specified convention.","title":"lsp-pyls-plugins-pydocstyle-add-select"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pydocstyle-ignore","text":"Default: nil Ignore errors and warnings","title":"lsp-pyls-plugins-pydocstyle-ignore"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pydocstyle-select","text":"Default: nil Select errors and warnings","title":"lsp-pyls-plugins-pydocstyle-select"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pydocstyle-match","text":"Default: (?!test_).*\\.py Check only files that exactly match the given regular expression; default is to match files that don\u2019t start with \u2019test_\u2019 but end with \u2019.py\u2019.","title":"lsp-pyls-plugins-pydocstyle-match"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pydocstyle-match-dir","text":"Default: [^\\.].* Search only dirs that exactly match the given regular expression; default is to match dirs which do not begin with a dot.","title":"lsp-pyls-plugins-pydocstyle-match-dir"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-pyflakes-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-pyflakes-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-rope-completion-enabled","text":"Default: nil Enable or disable the plugin.","title":"lsp-pyls-plugins-rope-completion-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-autopep8-enabled","text":"Default: t Enable or disable the plugin.","title":"lsp-pyls-plugins-autopep8-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-yapf-enabled","text":"Default: nil Enable or disable the plugin.","title":"lsp-pyls-plugins-yapf-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-rope-extension-modules","text":"Default: nil Builtin and c-extension modules that are allowed to be imported and inspected by rope.","title":"lsp-pyls-rope-extension-modules"},{"location":"page/lsp-pyls/#lsp-pyls-rope-rope-folder","text":"Default: nil The name of the folder in which rope stores project configurations and data. Pass \u2018nil\u2018 for not using such a folder at all.","title":"lsp-pyls-rope-rope-folder"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-flake8-enabled","text":"Default: nil Enable or disable the plugin.","title":"lsp-pyls-plugins-flake8-enabled"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-flake8-exclude","text":"Default: nil List of glob patterns to exclude from checks.","title":"lsp-pyls-plugins-flake8-exclude"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-flake8-filename","text":"Default: nil List of glob patterns to include for checks.","title":"lsp-pyls-plugins-flake8-filename"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-flake8-hang-closing","text":"Default: nil Toggle whether pycodestyle should enforce matching the indentation of the opening bracket\u2019s line. When you specify this, it will prefer that you hang the closing bracket rather than match the indentation.","title":"lsp-pyls-plugins-flake8-hang-closing"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-flake8-ignore","text":"Default: nil A list of codes to ignore.","title":"lsp-pyls-plugins-flake8-ignore"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-flake8-max-line-length","text":"Default: nil Set the maximum length that any line (with some exceptions) may be. Exceptions include lines that are either strings or comments which are entirely URLs.","title":"lsp-pyls-plugins-flake8-max-line-length"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-flake8-select","text":"Default: nil Specify the list of error codes you wish Flake8 to report. Similarly to \u2018lsp-pyls-plugins-flake8-ignore\u2019. You can specify a portion of an error code to get all that start with that string. For example, you can use E, E4, E43, and E431","title":"lsp-pyls-plugins-flake8-select"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-flake8-config","text":"Default: nil A path to a config file that will be the only config file read and used. This will cause Flake8 to ignore all other config files that exist. NOTE: other parameters as \u2018lsp-pyls-plugins-flake8-max-line-length\u2019 take precedence over parameters referenced in config.","title":"lsp-pyls-plugins-flake8-config"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-use-pyenv-environment","text":"Default: nil If enabled, pass the environment got by pyenv to jedi","title":"lsp-pyls-plugins-jedi-use-pyenv-environment"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-environment","text":"Default: nil Specify the environment that jedi runs on where /bin/python should be the python executable. This option will be prioritized over \u2018lsp-pyls-plugins-jedi-use-pyenv-environment\u2019.","title":"lsp-pyls-plugins-jedi-environment"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-completion-fuzzy","text":"Default: nil If enabled, uses fuzzy completion in jedi. Requires pyls >= 0.32.0 Can hit performance, as well as lsp-mode implements its own fuzzy search on completion items.","title":"lsp-pyls-plugins-jedi-completion-fuzzy"},{"location":"page/lsp-pyls/#lsp-pyls-plugins-jedi-completion-include-class-objects","text":"Default: t If enabled, adds class objects to completion in order to avoid snippet with init args. Has no effect if \u2018lsp-pyls-plugins-jedi-completion-include-params\u2019 is disabled. Requires pyls >= 0.33.0","title":"lsp-pyls-plugins-jedi-completion-include-class-objects"},{"location":"page/lsp-pyls/#lsp-pyls-rename-backend","text":"Default: jedi Choose renaming backend. Jedi is preferred but only works for python >= 3.6 and pyls >= 0.32.0 Beware that Jedi is lazy and doesn\u2019t scan the whole project. So it will rename only references it can find.","title":"lsp-pyls-rename-backend"},{"location":"page/lsp-python-ms/","text":"Python(Microsoft) # Server # For information about the LSP server, check the Microsoft Python Language Server . Installation # For instruction on how to install, check here . Debugger: Yes # Available configurations #","title":"Lsp python ms"},{"location":"page/lsp-python-ms/#pythonmicrosoft","text":"","title":"Python(Microsoft)"},{"location":"page/lsp-python-ms/#server","text":"For information about the LSP server, check the Microsoft Python Language Server .","title":"Server"},{"location":"page/lsp-python-ms/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-python-ms/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-python-ms/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-r/","text":"R # Server # For information about the LSP server, check the languageserver . Installation # install.packages(\u201clanguageserver\u201d) Debugger: Not available # Available configurations # lsp-clients-r-server-command # Default: (R --slave -e languageserver::run()) Command to start the R language server.","title":"R"},{"location":"page/lsp-r/#r","text":"","title":"R"},{"location":"page/lsp-r/#server","text":"For information about the LSP server, check the languageserver .","title":"Server"},{"location":"page/lsp-r/#installation","text":"install.packages(\u201clanguageserver\u201d)","title":"Installation"},{"location":"page/lsp-r/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-r/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-r/#lsp-clients-r-server-command","text":"Default: (R --slave -e languageserver::run()) Command to start the R language server.","title":"lsp-clients-r-server-command"},{"location":"page/lsp-rust-analyzer/","text":"Rust # Server # For information about the LSP server, check the rust-analyzer . Installation # For instruction on how to install, check here . Debugger: Not available # Available configurations #","title":"Lsp rust analyzer"},{"location":"page/lsp-rust-analyzer/#rust","text":"","title":"Rust"},{"location":"page/lsp-rust-analyzer/#server","text":"For information about the LSP server, check the rust-analyzer .","title":"Server"},{"location":"page/lsp-rust-analyzer/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-rust-analyzer/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-rust-analyzer/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-rust/","text":"LSP Rust # NOTE: If you are using rustic-mode , you have to change rustic-lsp-server instead of lsp-rust-server , since it also supports eglot as a lightweight alternative to lsp-mode. lsp-rust-server Choose LSP server (default is RLS) lsp-rust-switch-server Switch priorities of lsp servers RLS # Customization # This is an incomplete list of the available options lsp-rust-rls-server-command change command to start RLS lsp-rust-show-hover-context turn off hover tooltips rustfmt # Code formatting with rustfmt can be configured with: lsp-rust-rustfmt-path change default path for rustfmt executable To enable automatic code format on save, add this to your init.el ( rust-mode is assumed to be installed): (add-hook 'before-save-hook (lambda () (when (eq 'rust-mode major-mode) (lsp-format-buffer)))) rust-analyzer # Customization # lsp-rust-analyzer-server-command change command to start rust-analyzer lsp-rust-analyzer-server-display-inlay-hints toggle inlay hints lsp-rust-analyzer-display-chaining-hints show inlay type hints for method chains lsp-rust-analyzer-display-parameter-hints show function parameter name inlay hints at the call site lsp-rust-analyzer-max-inlay-hint-length max inlay hint length lsp-rust-analyzer-cargo-watch-enable toggle cargo watch lsp-rust-analyzer-cargo-watch-command cargo watch command, e.g. check or clippy lsp-rust-analyzer-cargo-watch-args extra args passed to cargo watch command, should be specified as a vector of strings lsp-rust-analyzer-use-client-watching toggle client side watching lsp-rust-analyzer-cargo-all-targets should run cargo watch for all targets or not lsp-rust-analyzer-exclude-globs a list of glob patterns for Cargo package exclusion lsp-rust-analyzer-enabled-feature-flags a list of feature flags that should be enabled lsp-rust-analyzer-lru-capacity Number of syntax trees rust-analyzer keeps in memory lsp-rust-analyzer-cargo-override-command Advanced option, fully override the command rust-analyzer uses for checking. The command should include --message=format=json or similar option lsp-rust-analyzer-inlay-face The face to use for the Rust Analyzer inlays Commands # lsp-rust-analyzer-syntax-tree # Display syntax tree for current buffer lsp-rust-analyzer-status # Display status information for rust-analyzer lsp-rust-analyzer-join-lines # Join selected lines into one, smartly fixing up whitespace and trailing commas before: after: inlay-hints # lsp-rust-analyzer-inlay-hints-mode enables displaying of inlay hints NOTE: the inlay hints interact badly with the lsp-ui sideline, because it doesn't seem to consider the overlays in its width calculation, which often leads to lines wrapping around. Macro expansion # lsp-rust-analyzer-expand-macro expand macro call at point recursively Use your own function for displaying macro expansion by customizing lsp-rust-analyzer-macro-expansion-method Formatted and highlighted result with the default function of rustic. auto-import # Get a list of possible auto import candidates with lsp-execute-code-action Caveats # Rust Analyzer does not support disabling snippets - https://github.com/rust-analyzer/rust-analyzer/issues/2518","title":"Rust"},{"location":"page/lsp-rust/#lsp-rust","text":"NOTE: If you are using rustic-mode , you have to change rustic-lsp-server instead of lsp-rust-server , since it also supports eglot as a lightweight alternative to lsp-mode. lsp-rust-server Choose LSP server (default is RLS) lsp-rust-switch-server Switch priorities of lsp servers","title":"LSP Rust"},{"location":"page/lsp-rust/#rls","text":"","title":"RLS"},{"location":"page/lsp-rust/#customization","text":"This is an incomplete list of the available options lsp-rust-rls-server-command change command to start RLS lsp-rust-show-hover-context turn off hover tooltips","title":"Customization"},{"location":"page/lsp-rust/#rustfmt","text":"Code formatting with rustfmt can be configured with: lsp-rust-rustfmt-path change default path for rustfmt executable To enable automatic code format on save, add this to your init.el ( rust-mode is assumed to be installed): (add-hook 'before-save-hook (lambda () (when (eq 'rust-mode major-mode) (lsp-format-buffer))))","title":"rustfmt"},{"location":"page/lsp-rust/#rust-analyzer","text":"","title":"rust-analyzer"},{"location":"page/lsp-rust/#customization_1","text":"lsp-rust-analyzer-server-command change command to start rust-analyzer lsp-rust-analyzer-server-display-inlay-hints toggle inlay hints lsp-rust-analyzer-display-chaining-hints show inlay type hints for method chains lsp-rust-analyzer-display-parameter-hints show function parameter name inlay hints at the call site lsp-rust-analyzer-max-inlay-hint-length max inlay hint length lsp-rust-analyzer-cargo-watch-enable toggle cargo watch lsp-rust-analyzer-cargo-watch-command cargo watch command, e.g. check or clippy lsp-rust-analyzer-cargo-watch-args extra args passed to cargo watch command, should be specified as a vector of strings lsp-rust-analyzer-use-client-watching toggle client side watching lsp-rust-analyzer-cargo-all-targets should run cargo watch for all targets or not lsp-rust-analyzer-exclude-globs a list of glob patterns for Cargo package exclusion lsp-rust-analyzer-enabled-feature-flags a list of feature flags that should be enabled lsp-rust-analyzer-lru-capacity Number of syntax trees rust-analyzer keeps in memory lsp-rust-analyzer-cargo-override-command Advanced option, fully override the command rust-analyzer uses for checking. The command should include --message=format=json or similar option lsp-rust-analyzer-inlay-face The face to use for the Rust Analyzer inlays","title":"Customization"},{"location":"page/lsp-rust/#commands","text":"","title":"Commands"},{"location":"page/lsp-rust/#lsp-rust-analyzer-syntax-tree","text":"Display syntax tree for current buffer","title":"lsp-rust-analyzer-syntax-tree"},{"location":"page/lsp-rust/#lsp-rust-analyzer-status","text":"Display status information for rust-analyzer","title":"lsp-rust-analyzer-status"},{"location":"page/lsp-rust/#lsp-rust-analyzer-join-lines","text":"Join selected lines into one, smartly fixing up whitespace and trailing commas before: after:","title":"lsp-rust-analyzer-join-lines"},{"location":"page/lsp-rust/#inlay-hints","text":"lsp-rust-analyzer-inlay-hints-mode enables displaying of inlay hints NOTE: the inlay hints interact badly with the lsp-ui sideline, because it doesn't seem to consider the overlays in its width calculation, which often leads to lines wrapping around.","title":"inlay-hints"},{"location":"page/lsp-rust/#macro-expansion","text":"lsp-rust-analyzer-expand-macro expand macro call at point recursively Use your own function for displaying macro expansion by customizing lsp-rust-analyzer-macro-expansion-method Formatted and highlighted result with the default function of rustic.","title":"Macro expansion"},{"location":"page/lsp-rust/#auto-import","text":"Get a list of possible auto import candidates with lsp-execute-code-action","title":"auto-import"},{"location":"page/lsp-rust/#caveats","text":"Rust Analyzer does not support disabling snippets - https://github.com/rust-analyzer/rust-analyzer/issues/2518","title":"Caveats"},{"location":"page/lsp-serenata/","text":"PHP (Serenata) # Server # For information about the LSP server, check the Serenata . Installation # For instruction on how to install, check here . Debugger: Yes # Available configurations # lsp-serenata-server-path # Default: serenata.phar Path to the Serenata Language Server phar file. It can be downloaded from https://gitlab.com/Serenata/Serenata/-/releases.","title":"PHP (Serenata)"},{"location":"page/lsp-serenata/#php-serenata","text":"","title":"PHP (Serenata)"},{"location":"page/lsp-serenata/#server","text":"For information about the LSP server, check the Serenata .","title":"Server"},{"location":"page/lsp-serenata/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-serenata/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-serenata/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-serenata/#lsp-serenata-server-path","text":"Default: serenata.phar Path to the Serenata Language Server phar file. It can be downloaded from https://gitlab.com/Serenata/Serenata/-/releases.","title":"lsp-serenata-server-path"},{"location":"page/lsp-solargraph/","text":"Ruby # Server # For information about the LSP server, check the solargraph . Installation # gem install solargraph Debugger: Yes # Available configurations # lsp-solargraph-completion # Default: t Enable completion lsp-solargraph-hover # Default: t Enable hover lsp-solargraph-diagnostics # Default: t Enable diagnostics lsp-solargraph-autoformat # Default: nil Enable automatic formatting while typing (WARNING: experimental) lsp-solargraph-formatting # Default: t Enable document formatting lsp-solargraph-symbols # Default: t Enable symbols lsp-solargraph-definitions # Default: t Enable definitions (go to, etc.) lsp-solargraph-rename # Default: t Enable symbol renaming lsp-solargraph-references # Default: t Enable finding references lsp-solargraph-folding # Default: t Enable folding ranges lsp-solargraph-log-level # Default: warn Level of debug info to log. \u2018warn\u2018 is least and \u2018debug\u2018 is most. lsp-solargraph-use-bundler # Default: nil Run solargraph under bundler lsp-solargraph-multi-root # Default: t If non nil, \u2018solargraph\u2019 will be started in multi-root mode.","title":"Ruby"},{"location":"page/lsp-solargraph/#ruby","text":"","title":"Ruby"},{"location":"page/lsp-solargraph/#server","text":"For information about the LSP server, check the solargraph .","title":"Server"},{"location":"page/lsp-solargraph/#installation","text":"gem install solargraph","title":"Installation"},{"location":"page/lsp-solargraph/#debugger-yes","text":"","title":"Debugger: Yes"},{"location":"page/lsp-solargraph/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-solargraph/#lsp-solargraph-completion","text":"Default: t Enable completion","title":"lsp-solargraph-completion"},{"location":"page/lsp-solargraph/#lsp-solargraph-hover","text":"Default: t Enable hover","title":"lsp-solargraph-hover"},{"location":"page/lsp-solargraph/#lsp-solargraph-diagnostics","text":"Default: t Enable diagnostics","title":"lsp-solargraph-diagnostics"},{"location":"page/lsp-solargraph/#lsp-solargraph-autoformat","text":"Default: nil Enable automatic formatting while typing (WARNING: experimental)","title":"lsp-solargraph-autoformat"},{"location":"page/lsp-solargraph/#lsp-solargraph-formatting","text":"Default: t Enable document formatting","title":"lsp-solargraph-formatting"},{"location":"page/lsp-solargraph/#lsp-solargraph-symbols","text":"Default: t Enable symbols","title":"lsp-solargraph-symbols"},{"location":"page/lsp-solargraph/#lsp-solargraph-definitions","text":"Default: t Enable definitions (go to, etc.)","title":"lsp-solargraph-definitions"},{"location":"page/lsp-solargraph/#lsp-solargraph-rename","text":"Default: t Enable symbol renaming","title":"lsp-solargraph-rename"},{"location":"page/lsp-solargraph/#lsp-solargraph-references","text":"Default: t Enable finding references","title":"lsp-solargraph-references"},{"location":"page/lsp-solargraph/#lsp-solargraph-folding","text":"Default: t Enable folding ranges","title":"lsp-solargraph-folding"},{"location":"page/lsp-solargraph/#lsp-solargraph-log-level","text":"Default: warn Level of debug info to log. \u2018warn\u2018 is least and \u2018debug\u2018 is most.","title":"lsp-solargraph-log-level"},{"location":"page/lsp-solargraph/#lsp-solargraph-use-bundler","text":"Default: nil Run solargraph under bundler","title":"lsp-solargraph-use-bundler"},{"location":"page/lsp-solargraph/#lsp-solargraph-multi-root","text":"Default: t If non nil, \u2018solargraph\u2019 will be started in multi-root mode.","title":"lsp-solargraph-multi-root"},{"location":"page/lsp-sqls/","text":"SQL (sqls) # Server # For information about the LSP server, check the sqls . Installation # go get github.com/lighttiger2505/sqls Debugger: Not available # Available configurations # lsp-sqls-server # Default: sqls Path to the \u2018sqls\u2018 binary. lsp-sqls-workspace-config-path # Default: workspace If non-nil then setup workspace configuration with json file path.","title":"SQL (sqls)"},{"location":"page/lsp-sqls/#sql-sqls","text":"","title":"SQL (sqls)"},{"location":"page/lsp-sqls/#server","text":"For information about the LSP server, check the sqls .","title":"Server"},{"location":"page/lsp-sqls/#installation","text":"go get github.com/lighttiger2505/sqls","title":"Installation"},{"location":"page/lsp-sqls/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-sqls/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-sqls/#lsp-sqls-server","text":"Default: sqls Path to the \u2018sqls\u2018 binary.","title":"lsp-sqls-server"},{"location":"page/lsp-sqls/#lsp-sqls-workspace-config-path","text":"Default: workspace If non-nil then setup workspace configuration with json file path.","title":"lsp-sqls-workspace-config-path"},{"location":"page/lsp-terraform/","text":"Terraform # Server # For information about the LSP server, check the terraform-lsp . Installation # Git clone outside of $GOPATH; go install Debugger: Not available # Available configurations # lsp-terraform-server # Default: terraform-lsp Path to the \u2018terraform-lsp\u2019 binary. lsp-terraform-enable-logging # Default: nil If non-nil, enable \u2018terraform-ls\u2019\u2019s native logging.","title":"Terraform"},{"location":"page/lsp-terraform/#terraform","text":"","title":"Terraform"},{"location":"page/lsp-terraform/#server","text":"For information about the LSP server, check the terraform-lsp .","title":"Server"},{"location":"page/lsp-terraform/#installation","text":"Git clone outside of $GOPATH; go install","title":"Installation"},{"location":"page/lsp-terraform/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-terraform/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-terraform/#lsp-terraform-server","text":"Default: terraform-lsp Path to the \u2018terraform-lsp\u2019 binary.","title":"lsp-terraform-server"},{"location":"page/lsp-terraform/#lsp-terraform-enable-logging","text":"Default: nil If non-nil, enable \u2018terraform-ls\u2019\u2019s native logging.","title":"lsp-terraform-enable-logging"},{"location":"page/lsp-tex/","text":"TeX, LaTeX, etc. # Server # For information about the LSP server, check the Digestif . Installation # luarocks --server http://luarocks.org/dev install digestif Debugger: Not available # Available configurations # lsp-tex-server # Default: texlab Choose LSP tex server. lsp-clients-digestif-executable # Default: digestif Command to start the Digestif language server. lsp-clients-texlab-executable # Default: texlab Command to start the texlab language server.","title":"TeX, LaTeX, etc (digestif)"},{"location":"page/lsp-tex/#tex-latex-etc","text":"","title":"TeX, LaTeX, etc."},{"location":"page/lsp-tex/#server","text":"For information about the LSP server, check the Digestif .","title":"Server"},{"location":"page/lsp-tex/#installation","text":"luarocks --server http://luarocks.org/dev install digestif","title":"Installation"},{"location":"page/lsp-tex/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-tex/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-tex/#lsp-tex-server","text":"Default: texlab Choose LSP tex server.","title":"lsp-tex-server"},{"location":"page/lsp-tex/#lsp-clients-digestif-executable","text":"Default: digestif Command to start the Digestif language server.","title":"lsp-clients-digestif-executable"},{"location":"page/lsp-tex/#lsp-clients-texlab-executable","text":"Default: texlab Command to start the texlab language server.","title":"lsp-clients-texlab-executable"},{"location":"page/lsp-texlab/","text":"TeX, LaTeX, etc. # Server # For information about the LSP server, check the texlab . Installation # cargo install --git https://github.com/latex-lsp/texlab.git Debugger: Not available # Available configurations #","title":"TeX, LaTeX, etc (texlab)"},{"location":"page/lsp-texlab/#tex-latex-etc","text":"","title":"TeX, LaTeX, etc."},{"location":"page/lsp-texlab/#server","text":"For information about the LSP server, check the texlab .","title":"Server"},{"location":"page/lsp-texlab/#installation","text":"cargo install --git https://github.com/latex-lsp/texlab.git","title":"Installation"},{"location":"page/lsp-texlab/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-texlab/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-typescript-javascript/","text":"JavaScript/TypeScript (sourcegraph) # Server # For information about the LSP server, check the javascript-typescript-stdio . Installation # npm i -g javascript-typescript-langserver Debugger: Yes (Firefox/Chrome) # Available configurations # lsp-clients-typescript-javascript-server-args # Default: nil Extra arguments for the typescript-language-server language server.","title":"JavaScript/TypeScript (sourcegraph)"},{"location":"page/lsp-typescript-javascript/#javascripttypescript-sourcegraph","text":"","title":"JavaScript/TypeScript (sourcegraph)"},{"location":"page/lsp-typescript-javascript/#server","text":"For information about the LSP server, check the javascript-typescript-stdio .","title":"Server"},{"location":"page/lsp-typescript-javascript/#installation","text":"npm i -g javascript-typescript-langserver","title":"Installation"},{"location":"page/lsp-typescript-javascript/#debugger-yes-firefoxchrome","text":"","title":"Debugger: Yes (Firefox/Chrome)"},{"location":"page/lsp-typescript-javascript/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-typescript-javascript/#lsp-clients-typescript-javascript-server-args","text":"Default: nil Extra arguments for the typescript-language-server language server.","title":"lsp-clients-typescript-javascript-server-args"},{"location":"page/lsp-typescript/","text":"JavaScript/TypeScript (theia-ide) # Server # For information about the LSP server, check the typescript-language-server (recommended) . Installation # npm i -g typescript-language-server; npm i -g typescript Debugger: Yes (Firefox/Chrome) # Available configurations # lsp-clients-typescript-server-args # Default: (--stdio) Extra arguments for the typescript-language-server language server. lsp-clients-typescript-log-verbosity # Default: info The server log verbosity. lsp-clients-typescript-plugins # Default: [] The list of plugins to load. It should be a vector of plist with keys \u2018:location\u2019 and \u2018:name\u2019 where \u2018:name\u2019 is the name of the package and \u2018:location\u2019 is the directory containing the package. Example: (vector (list :name \"@vsintellicode/typescript-intellicode-plugin\" :location \" .vscode/extensions/visualstudioexptteam.vscodeintellicode-1.1.9/\"))","title":"JavaScript/TypeScript (theia-ide)"},{"location":"page/lsp-typescript/#javascripttypescript-theia-ide","text":"","title":"JavaScript/TypeScript (theia-ide)"},{"location":"page/lsp-typescript/#server","text":"For information about the LSP server, check the typescript-language-server (recommended) .","title":"Server"},{"location":"page/lsp-typescript/#installation","text":"npm i -g typescript-language-server; npm i -g typescript","title":"Installation"},{"location":"page/lsp-typescript/#debugger-yes-firefoxchrome","text":"","title":"Debugger: Yes (Firefox/Chrome)"},{"location":"page/lsp-typescript/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-typescript/#lsp-clients-typescript-server-args","text":"Default: (--stdio) Extra arguments for the typescript-language-server language server.","title":"lsp-clients-typescript-server-args"},{"location":"page/lsp-typescript/#lsp-clients-typescript-log-verbosity","text":"Default: info The server log verbosity.","title":"lsp-clients-typescript-log-verbosity"},{"location":"page/lsp-typescript/#lsp-clients-typescript-plugins","text":"Default: [] The list of plugins to load. It should be a vector of plist with keys \u2018:location\u2019 and \u2018:name\u2019 where \u2018:name\u2019 is the name of the package and \u2018:location\u2019 is the directory containing the package. Example: (vector (list :name \"@vsintellicode/typescript-intellicode-plugin\" :location \" .vscode/extensions/visualstudioexptteam.vscodeintellicode-1.1.9/\"))","title":"lsp-clients-typescript-plugins"},{"location":"page/lsp-verilog/","text":"Verilog/SystemVerilog # Server # For information about the LSP server, check the hdl_checker . Installation # pip install hdl-checker --upgrade Debugger: Not available # Available configurations # lsp-clients-verilog-executable # Default: (hdl_checker --lsp) Command to start the hdl_checker language server.","title":"Verilog/SystemVerilog"},{"location":"page/lsp-verilog/#verilogsystemverilog","text":"","title":"Verilog/SystemVerilog"},{"location":"page/lsp-verilog/#server","text":"For information about the LSP server, check the hdl_checker .","title":"Server"},{"location":"page/lsp-verilog/#installation","text":"pip install hdl-checker --upgrade","title":"Installation"},{"location":"page/lsp-verilog/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-verilog/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-verilog/#lsp-clients-verilog-executable","text":"Default: (hdl_checker --lsp) Command to start the hdl_checker language server.","title":"lsp-clients-verilog-executable"},{"location":"page/lsp-vetur/","text":"Vue # Server # For information about the LSP server, check the vue-language-server . Installation # npm install -g vls Debugger: Yes (Firefox/Chrome) # Available configurations # lsp-vetur-use-workspace-dependencies # Default: nil Use dependencies from workspace. Currently only for TypeScript. lsp-vetur-completion-auto-import # Default: t Include completion for module export and auto import them lsp-vetur-completion-use-scaffold-snippets # Default: t Enable/disable Vetur\u2019s built-in scaffolding snippets lsp-vetur-completion-tag-casing # Default: kebab Casing conversion for tag completion lsp-vetur-grammar-custom-blocks # Default: ((docs . md) (i18n . json)) Mapping from custom block tag name to language name. Used for generating grammar to support syntax highlighting for custom blocks. lsp-vetur-validation-template # Default: t Validate vue-html in using eslint-plugin-vue lsp-vetur-validation-style # Default: t Validate css/scss/less/postcss in","title":"Vue"},{"location":"page/lsp-vetur/#vue","text":"","title":"Vue"},{"location":"page/lsp-vetur/#server","text":"For information about the LSP server, check the vue-language-server .","title":"Server"},{"location":"page/lsp-vetur/#installation","text":"npm install -g vls","title":"Installation"},{"location":"page/lsp-vetur/#debugger-yes-firefoxchrome","text":"","title":"Debugger: Yes (Firefox/Chrome)"},{"location":"page/lsp-vetur/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-vetur/#lsp-vetur-use-workspace-dependencies","text":"Default: nil Use dependencies from workspace. Currently only for TypeScript.","title":"lsp-vetur-use-workspace-dependencies"},{"location":"page/lsp-vetur/#lsp-vetur-completion-auto-import","text":"Default: t Include completion for module export and auto import them","title":"lsp-vetur-completion-auto-import"},{"location":"page/lsp-vetur/#lsp-vetur-completion-use-scaffold-snippets","text":"Default: t Enable/disable Vetur\u2019s built-in scaffolding snippets","title":"lsp-vetur-completion-use-scaffold-snippets"},{"location":"page/lsp-vetur/#lsp-vetur-completion-tag-casing","text":"Default: kebab Casing conversion for tag completion","title":"lsp-vetur-completion-tag-casing"},{"location":"page/lsp-vetur/#lsp-vetur-grammar-custom-blocks","text":"Default: ((docs . md) (i18n . json)) Mapping from custom block tag name to language name. Used for generating grammar to support syntax highlighting for custom blocks.","title":"lsp-vetur-grammar-custom-blocks"},{"location":"page/lsp-vetur/#lsp-vetur-validation-template","text":"Default: t Validate vue-html in using eslint-plugin-vue","title":"lsp-vetur-validation-template"},{"location":"page/lsp-vetur/#lsp-vetur-validation-style","text":"Default: t Validate css/scss/less/postcss in","title":"lsp-vetur-validation-style"},{"location":"page/lsp-vhdl/","text":"VHDL # Server # For information about the LSP server, check the VHDL Tool . Installation # For instruction on how to install, check here . Debugger: Not available # Available configurations # lsp-vhdl-server # Default: vhdl-tool Select which server to use: VHDL-tool: A syntax checking, type checking and linting tool (http://vhdltool.com). HDL Checker: A wrapper for third party tools such as GHDL, ModelSim, Vivado Simulator (https://github.com/suoto/hdl_checker). VHDL LS: A complete VHDL language server protocol implementation with diagnostics, navigate to symbol, find all references etc. (https://github.com/kraigher/rust_hdl). lsp-vhdl-server-path # Default: nil Path to binary server file.","title":"VHDL"},{"location":"page/lsp-vhdl/#vhdl","text":"","title":"VHDL"},{"location":"page/lsp-vhdl/#server","text":"For information about the LSP server, check the VHDL Tool .","title":"Server"},{"location":"page/lsp-vhdl/#installation","text":"For instruction on how to install, check here .","title":"Installation"},{"location":"page/lsp-vhdl/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-vhdl/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-vhdl/#lsp-vhdl-server","text":"Default: vhdl-tool Select which server to use: VHDL-tool: A syntax checking, type checking and linting tool (http://vhdltool.com). HDL Checker: A wrapper for third party tools such as GHDL, ModelSim, Vivado Simulator (https://github.com/suoto/hdl_checker). VHDL LS: A complete VHDL language server protocol implementation with diagnostics, navigate to symbol, find all references etc. (https://github.com/kraigher/rust_hdl).","title":"lsp-vhdl-server"},{"location":"page/lsp-vhdl/#lsp-vhdl-server-path","text":"Default: nil Path to binary server file.","title":"lsp-vhdl-server-path"},{"location":"page/lsp-vim/","text":"Vimscript # Server # For information about the LSP server, check the vim-language-server . Installation # npm install -g vim-language-server Debugger: n/a # Available configurations # lsp-clients-vim-executable # Default: (vim-language-server --stdio) Command to start the vim language server. lsp-clients-vim-initialization-options # Default: ((iskeyword . vim iskeyword option) (vimruntime . /usr/bin/vim) (runtimepath . /usr/bin/vim) (diagnostic (enable . t)) (indexes (runtimepath . t) (gap . 100) (count . 3)) (suggest (fromVimruntime . t) (fromRuntimepath . :json-false))) Initialization options for vim language server.","title":"Vimscript"},{"location":"page/lsp-vim/#vimscript","text":"","title":"Vimscript"},{"location":"page/lsp-vim/#server","text":"For information about the LSP server, check the vim-language-server .","title":"Server"},{"location":"page/lsp-vim/#installation","text":"npm install -g vim-language-server","title":"Installation"},{"location":"page/lsp-vim/#debugger-na","text":"","title":"Debugger: n/a"},{"location":"page/lsp-vim/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-vim/#lsp-clients-vim-executable","text":"Default: (vim-language-server --stdio) Command to start the vim language server.","title":"lsp-clients-vim-executable"},{"location":"page/lsp-vim/#lsp-clients-vim-initialization-options","text":"Default: ((iskeyword . vim iskeyword option) (vimruntime . /usr/bin/vim) (runtimepath . /usr/bin/vim) (diagnostic (enable . t)) (indexes (runtimepath . t) (gap . 100) (count . 3)) (suggest (fromVimruntime . t) (fromRuntimepath . :json-false))) Initialization options for vim language server.","title":"lsp-clients-vim-initialization-options"},{"location":"page/lsp-xml/","text":"XML # Server # For information about the LSP server, check the lsp4xml . Installation # Download from lsp4xml releases Debugger: Not available # Available configurations # lsp-xml-trace-server # Default: off Traces the communication between VS Code and the XML language server. lsp-xml-catalogs # Default: nil Array of XML Catalogs lsp-xml-logs-client # Default: t Should the server log to client output lsp-xml-format-split-attributes # Default: nil Split multiple attributes each onto a new line lsp-xml-format-join-cdata-lines # Default: nil Join lines in a CDATA tag\u2019s content lsp-xml-format-join-comment-lines # Default: nil Join comment content on format lsp-xml-format-space-before-empty-close-tag # Default: t Insert space before end of self closing tag. Example: -> lsp-xml-format-join-content-lines # Default: nil Normalize the whitespace of content inside an element. Newlines and excess whitespace are removed. lsp-xml-format-preserve-empty-content # Default: nil Preserve empty content/whitespace in a tag. lsp-xml-format-enabled # Default: t Enable/disable ability to format document lsp-xml-format-quotations # Default: doubleQuotes Which type of quotes to use for attribute values when formatting. lsp-xml-file-associations # Default: nil Allows XML schemas to be associated to file name patterns. Example: [{ \"systemId\":\"path/to/file.xsd\",\"pattern\": \"file1.xml\" },{ \"systemId\": \"http://www.w3.org/2001/XMLSchema.xsd\",\"pattern\": \"* / .xsd\" }] lsp-xml-completion-auto-close-tags # Default: t Enable/disable autoclosing of XML tags. IMPORTANT: Turn off editor.autoClosingTags for this to work lsp-xml-server-vmargs # Default: -noverify -Xmx64M -XX:+UseG1GC -XX:+UseStringDeduplication Specifies extra VM arguments used to launch the XML Language Server. Eg. use \u2018-noverify -Xmx1G -XX:+UseG1GC -XX:+UseStringDeduplication\u2018 to bypass class verification, increase the heap size to 1GB and enable String deduplication with the G1 Garbage collector lsp-xml-server-work-dir # Default: ~/.lsp4xml Set a custom folder path for cached XML Schemas. An absolute path is expected, although the ~ prefix (for the user home directory) is supported. lsp-xml-validation-no-grammar # Default: hint The message severity when a document has no associated grammar. lsp-xml-validation-enabled # Default: t Enable/disable all validation. lsp-xml-validation-schema # Default: t Enable/disable schema based validation. Ignored if \"xml.validation.enabled\": false. lsp-xml-jar-file # Default: ~/.emacs.d/org.eclipse.lsp4xml-0.3.0-uber.jar Xml server jar command. lsp-xml-server-command # Default: (java -jar /home/runner/.emacs.d/org.eclipse.lsp4xml-0.3.0-uber.jar) Xml server command.","title":"XML"},{"location":"page/lsp-xml/#xml","text":"","title":"XML"},{"location":"page/lsp-xml/#server","text":"For information about the LSP server, check the lsp4xml .","title":"Server"},{"location":"page/lsp-xml/#installation","text":"Download from lsp4xml releases","title":"Installation"},{"location":"page/lsp-xml/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-xml/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-xml/#lsp-xml-trace-server","text":"Default: off Traces the communication between VS Code and the XML language server.","title":"lsp-xml-trace-server"},{"location":"page/lsp-xml/#lsp-xml-catalogs","text":"Default: nil Array of XML Catalogs","title":"lsp-xml-catalogs"},{"location":"page/lsp-xml/#lsp-xml-logs-client","text":"Default: t Should the server log to client output","title":"lsp-xml-logs-client"},{"location":"page/lsp-xml/#lsp-xml-format-split-attributes","text":"Default: nil Split multiple attributes each onto a new line","title":"lsp-xml-format-split-attributes"},{"location":"page/lsp-xml/#lsp-xml-format-join-cdata-lines","text":"Default: nil Join lines in a CDATA tag\u2019s content","title":"lsp-xml-format-join-cdata-lines"},{"location":"page/lsp-xml/#lsp-xml-format-join-comment-lines","text":"Default: nil Join comment content on format","title":"lsp-xml-format-join-comment-lines"},{"location":"page/lsp-xml/#lsp-xml-format-space-before-empty-close-tag","text":"Default: t Insert space before end of self closing tag. Example: ->","title":"lsp-xml-format-space-before-empty-close-tag"},{"location":"page/lsp-xml/#lsp-xml-format-join-content-lines","text":"Default: nil Normalize the whitespace of content inside an element. Newlines and excess whitespace are removed.","title":"lsp-xml-format-join-content-lines"},{"location":"page/lsp-xml/#lsp-xml-format-preserve-empty-content","text":"Default: nil Preserve empty content/whitespace in a tag.","title":"lsp-xml-format-preserve-empty-content"},{"location":"page/lsp-xml/#lsp-xml-format-enabled","text":"Default: t Enable/disable ability to format document","title":"lsp-xml-format-enabled"},{"location":"page/lsp-xml/#lsp-xml-format-quotations","text":"Default: doubleQuotes Which type of quotes to use for attribute values when formatting.","title":"lsp-xml-format-quotations"},{"location":"page/lsp-xml/#lsp-xml-file-associations","text":"Default: nil Allows XML schemas to be associated to file name patterns. Example: [{ \"systemId\":\"path/to/file.xsd\",\"pattern\": \"file1.xml\" },{ \"systemId\": \"http://www.w3.org/2001/XMLSchema.xsd\",\"pattern\": \"* / .xsd\" }]","title":"lsp-xml-file-associations"},{"location":"page/lsp-xml/#lsp-xml-completion-auto-close-tags","text":"Default: t Enable/disable autoclosing of XML tags. IMPORTANT: Turn off editor.autoClosingTags for this to work","title":"lsp-xml-completion-auto-close-tags"},{"location":"page/lsp-xml/#lsp-xml-server-vmargs","text":"Default: -noverify -Xmx64M -XX:+UseG1GC -XX:+UseStringDeduplication Specifies extra VM arguments used to launch the XML Language Server. Eg. use \u2018-noverify -Xmx1G -XX:+UseG1GC -XX:+UseStringDeduplication\u2018 to bypass class verification, increase the heap size to 1GB and enable String deduplication with the G1 Garbage collector","title":"lsp-xml-server-vmargs"},{"location":"page/lsp-xml/#lsp-xml-server-work-dir","text":"Default: ~/.lsp4xml Set a custom folder path for cached XML Schemas. An absolute path is expected, although the ~ prefix (for the user home directory) is supported.","title":"lsp-xml-server-work-dir"},{"location":"page/lsp-xml/#lsp-xml-validation-no-grammar","text":"Default: hint The message severity when a document has no associated grammar.","title":"lsp-xml-validation-no-grammar"},{"location":"page/lsp-xml/#lsp-xml-validation-enabled","text":"Default: t Enable/disable all validation.","title":"lsp-xml-validation-enabled"},{"location":"page/lsp-xml/#lsp-xml-validation-schema","text":"Default: t Enable/disable schema based validation. Ignored if \"xml.validation.enabled\": false.","title":"lsp-xml-validation-schema"},{"location":"page/lsp-xml/#lsp-xml-jar-file","text":"Default: ~/.emacs.d/org.eclipse.lsp4xml-0.3.0-uber.jar Xml server jar command.","title":"lsp-xml-jar-file"},{"location":"page/lsp-xml/#lsp-xml-server-command","text":"Default: (java -jar /home/runner/.emacs.d/org.eclipse.lsp4xml-0.3.0-uber.jar) Xml server command.","title":"lsp-xml-server-command"},{"location":"page/lsp-yaml/","text":"YAML # Server # For information about the LSP server, check the yaml . Installation # npm install -g yaml-language-server Debugger: Not available # Available configurations # lsp-yaml-format-enable # Default: t Enable/disable default YAML formatter. lsp-yaml-single-quote # Default: nil Use single quote instead of double quotes. lsp-yaml-bracket-spacing # Default: t Print spaces between brackets in objects. lsp-yaml-prose-wrap # Default: preserve Options for prose-wrap. Always: wrap prose if it exceeds the print width. Never: never wrap the prose. Preserve: wrap prose as-is. lsp-yaml-print-width # Default: 80 Specify the line length that the printer will wrap on. lsp-yaml-validate # Default: t Enable/disable validation feature. lsp-yaml-hover # Default: t Enable/disable hover feature. lsp-yaml-completion # Default: t Enable/disable completion feature. lsp-yaml-schemas # Default: nil Associate schemas to YAML files in a glob pattern. lsp-yaml-schema-store-enable # Default: t Enable/disable JSON Schema store. When set to true, available YAML schemas will be automatically pulled from the store. lsp-yaml-custom-tags # Default: nil Custom tags for the parser to use. lsp-yaml-server-command # Default: (yaml-language-server --stdio) Command to start yaml-languageserver.","title":"YAML"},{"location":"page/lsp-yaml/#yaml","text":"","title":"YAML"},{"location":"page/lsp-yaml/#server","text":"For information about the LSP server, check the yaml .","title":"Server"},{"location":"page/lsp-yaml/#installation","text":"npm install -g yaml-language-server","title":"Installation"},{"location":"page/lsp-yaml/#debugger-not-available","text":"","title":"Debugger: Not available"},{"location":"page/lsp-yaml/#available-configurations","text":"","title":"Available configurations"},{"location":"page/lsp-yaml/#lsp-yaml-format-enable","text":"Default: t Enable/disable default YAML formatter.","title":"lsp-yaml-format-enable"},{"location":"page/lsp-yaml/#lsp-yaml-single-quote","text":"Default: nil Use single quote instead of double quotes.","title":"lsp-yaml-single-quote"},{"location":"page/lsp-yaml/#lsp-yaml-bracket-spacing","text":"Default: t Print spaces between brackets in objects.","title":"lsp-yaml-bracket-spacing"},{"location":"page/lsp-yaml/#lsp-yaml-prose-wrap","text":"Default: preserve Options for prose-wrap. Always: wrap prose if it exceeds the print width. Never: never wrap the prose. Preserve: wrap prose as-is.","title":"lsp-yaml-prose-wrap"},{"location":"page/lsp-yaml/#lsp-yaml-print-width","text":"Default: 80 Specify the line length that the printer will wrap on.","title":"lsp-yaml-print-width"},{"location":"page/lsp-yaml/#lsp-yaml-validate","text":"Default: t Enable/disable validation feature.","title":"lsp-yaml-validate"},{"location":"page/lsp-yaml/#lsp-yaml-hover","text":"Default: t Enable/disable hover feature.","title":"lsp-yaml-hover"},{"location":"page/lsp-yaml/#lsp-yaml-completion","text":"Default: t Enable/disable completion feature.","title":"lsp-yaml-completion"},{"location":"page/lsp-yaml/#lsp-yaml-schemas","text":"Default: nil Associate schemas to YAML files in a glob pattern.","title":"lsp-yaml-schemas"},{"location":"page/lsp-yaml/#lsp-yaml-schema-store-enable","text":"Default: t Enable/disable JSON Schema store. When set to true, available YAML schemas will be automatically pulled from the store.","title":"lsp-yaml-schema-store-enable"},{"location":"page/lsp-yaml/#lsp-yaml-custom-tags","text":"Default: nil Custom tags for the parser to use.","title":"lsp-yaml-custom-tags"},{"location":"page/lsp-yaml/#lsp-yaml-server-command","text":"Default: (yaml-language-server --stdio) Command to start yaml-languageserver.","title":"lsp-yaml-server-command"},{"location":"page/performance/","text":"Performance # Tuning # Use M-x lsp-diagnose to validate if your lsp-mode is properly configured. In the section below, you could find description for each of the checks: When configured properly lsp-mode 's performance is on par with mainstream LSP clients (e. g. VScode , Theia , etc). Here are steps to achieve optimal results. Use Emacs 27+ with native json support. (Note: this requires that you have libjansson installed, and that emacs was compiled with `\u2013with-json` passed to `./configure`.) You can check your installation for native json support by running M-: (functionp 'json-serialize) RET . Benchmarks show that Emacs 27 is ~15 times faster than Emacs when using Elisp json parser implementation. Adjust gc-cons-threshold . The default setting is too low for lsp-mode 's needs due to the fact that client/server communication generates a lot of memory/garbage. You have two options: Set it to big number(100mb) like most of the popular starter kits like Spacemacs/Doom/Prelude, etc do: ( setq gc-cons-threshold 100000000 ) Follow the method recommended by Gnu Emacs Maintainer Eli Zaretskii: \"My suggestion is to repeatedly multiply gc-cons-threshold by 2 until you stop seeing significant improvements in responsiveness, and in any case not to increase by a factor larger than 100 or somesuch. If even a 100-fold increase doesn't help, there's some deeper problem with the Lisp code which produces so much garbage, or maybe GC is not the reason for slowdown.\" Source: https://www.reddit.com/r/emacs/comments/brc05y/is_lspmode_too_slow_to_use_for_anyone_else/eofulix/ Increase the amount of data which Emacs reads from the process. Again the emacs default is too low 4k considering that the some of the language server responses are in 800k - 3M range. ( setq read-process-output-max ( * 1024 1024 )) ;; 1mb Optional: use company-capf . Although company-lsp also supports caching lsp-mode 's company-capf does that by default. To achieve that uninstall company-lsp or put these lines in your config: ( setq lsp-prefer-capf t ) Note: - to verify which company backend implementation you are using do M-x company-diag when performing auto-completion. Optional: Disable lsp-ui . Normally, lsp-ui is very fast but in some systems (especially when using Windows ) lsp-ui overlays and popups might slow down emacs. Optional: fine-tune lsp-idle-delay . This variable determines how often lsp-mode will refresh the highlights, lenses, links, etc while you type. ( setq lsp-idle-delay 0.500 ) Reporting performance problems # If you have tried all of the non-optional steps from the list and emacs is still not very responsive please open a PR with the following information: Collect lsp-log data after setting lsp-print-performance to t . ( setq lsp-print-performance t ) Include emacs performance report. Use the following step to collect it: M-x profiler-start and select CPU Reproduce the slow behavior. M-x profiler-stop In the profiler report expand all nodes by doing C-u TAB . Note: - lsp-mode is just a frontend and the performance depends on server as well. Some servers (e. g. Palantir's Python Language Server) might be slow when performing auto-completion.","title":"Perfomance"},{"location":"page/performance/#performance","text":"","title":"Performance"},{"location":"page/performance/#tuning","text":"Use M-x lsp-diagnose to validate if your lsp-mode is properly configured. In the section below, you could find description for each of the checks: When configured properly lsp-mode 's performance is on par with mainstream LSP clients (e. g. VScode , Theia , etc). Here are steps to achieve optimal results. Use Emacs 27+ with native json support. (Note: this requires that you have libjansson installed, and that emacs was compiled with `\u2013with-json` passed to `./configure`.) You can check your installation for native json support by running M-: (functionp 'json-serialize) RET . Benchmarks show that Emacs 27 is ~15 times faster than Emacs when using Elisp json parser implementation. Adjust gc-cons-threshold . The default setting is too low for lsp-mode 's needs due to the fact that client/server communication generates a lot of memory/garbage. You have two options: Set it to big number(100mb) like most of the popular starter kits like Spacemacs/Doom/Prelude, etc do: ( setq gc-cons-threshold 100000000 ) Follow the method recommended by Gnu Emacs Maintainer Eli Zaretskii: \"My suggestion is to repeatedly multiply gc-cons-threshold by 2 until you stop seeing significant improvements in responsiveness, and in any case not to increase by a factor larger than 100 or somesuch. If even a 100-fold increase doesn't help, there's some deeper problem with the Lisp code which produces so much garbage, or maybe GC is not the reason for slowdown.\" Source: https://www.reddit.com/r/emacs/comments/brc05y/is_lspmode_too_slow_to_use_for_anyone_else/eofulix/ Increase the amount of data which Emacs reads from the process. Again the emacs default is too low 4k considering that the some of the language server responses are in 800k - 3M range. ( setq read-process-output-max ( * 1024 1024 )) ;; 1mb Optional: use company-capf . Although company-lsp also supports caching lsp-mode 's company-capf does that by default. To achieve that uninstall company-lsp or put these lines in your config: ( setq lsp-prefer-capf t ) Note: - to verify which company backend implementation you are using do M-x company-diag when performing auto-completion. Optional: Disable lsp-ui . Normally, lsp-ui is very fast but in some systems (especially when using Windows ) lsp-ui overlays and popups might slow down emacs. Optional: fine-tune lsp-idle-delay . This variable determines how often lsp-mode will refresh the highlights, lenses, links, etc while you type. ( setq lsp-idle-delay 0.500 )","title":"Tuning"},{"location":"page/performance/#reporting-performance-problems","text":"If you have tried all of the non-optional steps from the list and emacs is still not very responsive please open a PR with the following information: Collect lsp-log data after setting lsp-print-performance to t . ( setq lsp-print-performance t ) Include emacs performance report. Use the following step to collect it: M-x profiler-start and select CPU Reproduce the slow behavior. M-x profiler-stop In the profiler report expand all nodes by doing C-u TAB . Note: - lsp-mode is just a frontend and the performance depends on server as well. Some servers (e. g. Palantir's Python Language Server) might be slow when performing auto-completion.","title":"Reporting performance problems"},{"location":"page/remote/","text":"Remote # TRAMP # LSP mode has support for tramp buffers with the following requirements: The language server has to be present on the remote server. Having multi folder language server (like Eclipse JDT LS ) cannot have local and remote workspace folders. How does it work? # lsp-mode detects whether a particular file is located on remote machine and looks for a client which matches current file and it is marked as :remote? t. Then lsp-mode starts the client through tramp. Sample configuration # Here it is example how you can configure python language server to work when using TRAMP . Note that if you are trying to convert existing language server configuration you should copy all of it's properties(e. g. :request-handlers , activation-fn , etc). ( lsp-register-client ( make-lsp-client :new-connection ( lsp-tramp-connection \"<insert your LS's binary name or path here>\" ) :major-modes ' ( python-mode ) :remote? t :server-id 'pyls-remote )) Note: the path passed to lsp-tramp-connection should be either full path including host name, e. g. /docker:my-image:/usr/bin/rust-analyzer or the binary name (e. g. rust-analyzer ) if the binary is on the path. Dealing with stderr # With TRAMP, Emacs does not have an easy way to distinguish stdout and stderr, so when the underlying LSP process writes to stderr, it breaks the lsp-mode parser. As a workaround, lsp-mode is redirecting stderr to /tmp/<process-name>-<id>~stderr . Docker # Refer to lsp-docker README which provides a guide on how you can run lsp-mode in docker container.","title":"Remote"},{"location":"page/remote/#remote","text":"","title":"Remote"},{"location":"page/remote/#tramp","text":"LSP mode has support for tramp buffers with the following requirements: The language server has to be present on the remote server. Having multi folder language server (like Eclipse JDT LS ) cannot have local and remote workspace folders.","title":"TRAMP"},{"location":"page/remote/#how-does-it-work","text":"lsp-mode detects whether a particular file is located on remote machine and looks for a client which matches current file and it is marked as :remote? t. Then lsp-mode starts the client through tramp.","title":"How does it work?"},{"location":"page/remote/#sample-configuration","text":"Here it is example how you can configure python language server to work when using TRAMP . Note that if you are trying to convert existing language server configuration you should copy all of it's properties(e. g. :request-handlers , activation-fn , etc). ( lsp-register-client ( make-lsp-client :new-connection ( lsp-tramp-connection \"<insert your LS's binary name or path here>\" ) :major-modes ' ( python-mode ) :remote? t :server-id 'pyls-remote )) Note: the path passed to lsp-tramp-connection should be either full path including host name, e. g. /docker:my-image:/usr/bin/rust-analyzer or the binary name (e. g. rust-analyzer ) if the binary is on the path.","title":"Sample configuration"},{"location":"page/remote/#dealing-with-stderr","text":"With TRAMP, Emacs does not have an easy way to distinguish stdout and stderr, so when the underlying LSP process writes to stderr, it breaks the lsp-mode parser. As a workaround, lsp-mode is redirecting stderr to /tmp/<process-name>-<id>~stderr .","title":"Dealing with stderr"},{"location":"page/remote/#docker","text":"Refer to lsp-docker README which provides a guide on how you can run lsp-mode in docker container.","title":"Docker"},{"location":"page/settings/","text":"Settings # These are lsp-mode specific custom settings: lsp-log-io - If non-nil, print all messages to and from the language server to *lsp-log* . lsp-print-performance - If non-nil, print performance info. to *lsp-log* . lsp-inhibit-message - If non-nil, inhibit the message echo via inhibit-message . lsp-report-if-no-buffer - If non nil the errors will be reported even when the file is not open. lsp-keep-workspace-alive - If non nil keep workspace alive when the last workspace buffer is closed. lsp-enable-snippet - Enable/disable snippet completion support. lsp-auto-guess-root - Automatically guess the project root using projectile/project. Do not use this setting unless you are familiar with lsp-mode internals and you are sure that all of your projects are following projectile=/=project.el conventions. lsp-restart - Defines how server exited event must be handled. lsp-session-file - File where session information is stored. lsp-auto-configure - Auto configure lsp-mode . When set to t , lsp-mode will auto-configure lsp-ui and company-lsp . lsp-document-sync-method - How to sync the document with the language server. lsp-auto-execute-action - Auto-execute single action. lsp-eldoc-render-all - Display all of the info returned by document/onHover . If this is nil, eldoc will show only the symbol information. lsp-enable-completion-at-point - Enable completion-at-point integration. lsp-enable-xref - Enable xref integration. lsp-diagnostic-package - Specifies which package to use for diagnostics. Choose from :auto , :flycheck , :flymake and :none . Default is :auto which means use :flycheck if present. lsp-enable-indentation - Indent regions using the file formatting functionality provided by the language server. lsp-enable-on-type-formatting - Enable textDocument/onTypeFormatting integration. lsp-before-save-edits - If non-nil, lsp-mode will apply edits suggested by the language server before saving a document. lsp-imenu-show-container-name - Display the symbol's container name in an imenu entry. lsp-imenu-container-name-separator - Separator string to use to separate the container name from the symbol while displaying imenu entries. lsp-imenu-sort-methods - How to sort the imenu items. The value is a list of kind , name or position . Priorities are determined by the index of the element. lsp-response-timeout - Number of seconds to wait for a response from the language server before timing out. lsp-enable-file-watchers - If non-nil lsp-mode will watch the files in the workspace if the server has requested that. lsp-server-trace - Request trace mode on the language server. lsp-semantic-highlighting - Enable experimental semantic highlighting support lsp-enable-imenu - If non-nil, automatically enable imenu integration when server provides textDocument/documentSymbol . lsp-signature-auto-activate - Auto activate signature when trigger char is pressed. lsp-signature-render-documentation - Include signature documentation in signature help. lsp-enable-text-document-color - Enable textDocument/documentColor when server supports it. Checking project errors # To see all error statistics in the modeline you can enable lsp-diagnostics-modeline-mode . This is especially useful for languages that compilation might be broken due to errors in other files(e.g. Java/Haskell). ( with-eval-after-load 'lsp-mode ;; :project/:workspace/:file ( setq lsp-diagnostics-modeline-scope :project ) ( add-hook 'lsp-managed-mode-hook 'lsp-diagnostics-modeline-mode )) Tip: To find out the global errors you might use lsp-treemacs-errors-list . Code actions on modeline # For a UI feedback of the available code actions, you can enable lsp-modeline-code-actions-mode which shows available code actions on modeline: Breadcrumb on headerline # For a UI feedback on headerline of the document symbol at point, you can enable lsp-headerline-breadcrumb-mode which shows a breadcrumb on top of window: Limitations # File watches # When some of the workspaces that are active in the current project requests file notifications via workspace/didChangeWatchedFiles , lsp-mode will start monitoring each of the folders in the workspace for changes. In case your project contains a lot of files you might want to disable file monitoring via lsp-enable-file-watchers (you may use dir-locals).","title":"Settings"},{"location":"page/settings/#settings","text":"These are lsp-mode specific custom settings: lsp-log-io - If non-nil, print all messages to and from the language server to *lsp-log* . lsp-print-performance - If non-nil, print performance info. to *lsp-log* . lsp-inhibit-message - If non-nil, inhibit the message echo via inhibit-message . lsp-report-if-no-buffer - If non nil the errors will be reported even when the file is not open. lsp-keep-workspace-alive - If non nil keep workspace alive when the last workspace buffer is closed. lsp-enable-snippet - Enable/disable snippet completion support. lsp-auto-guess-root - Automatically guess the project root using projectile/project. Do not use this setting unless you are familiar with lsp-mode internals and you are sure that all of your projects are following projectile=/=project.el conventions. lsp-restart - Defines how server exited event must be handled. lsp-session-file - File where session information is stored. lsp-auto-configure - Auto configure lsp-mode . When set to t , lsp-mode will auto-configure lsp-ui and company-lsp . lsp-document-sync-method - How to sync the document with the language server. lsp-auto-execute-action - Auto-execute single action. lsp-eldoc-render-all - Display all of the info returned by document/onHover . If this is nil, eldoc will show only the symbol information. lsp-enable-completion-at-point - Enable completion-at-point integration. lsp-enable-xref - Enable xref integration. lsp-diagnostic-package - Specifies which package to use for diagnostics. Choose from :auto , :flycheck , :flymake and :none . Default is :auto which means use :flycheck if present. lsp-enable-indentation - Indent regions using the file formatting functionality provided by the language server. lsp-enable-on-type-formatting - Enable textDocument/onTypeFormatting integration. lsp-before-save-edits - If non-nil, lsp-mode will apply edits suggested by the language server before saving a document. lsp-imenu-show-container-name - Display the symbol's container name in an imenu entry. lsp-imenu-container-name-separator - Separator string to use to separate the container name from the symbol while displaying imenu entries. lsp-imenu-sort-methods - How to sort the imenu items. The value is a list of kind , name or position . Priorities are determined by the index of the element. lsp-response-timeout - Number of seconds to wait for a response from the language server before timing out. lsp-enable-file-watchers - If non-nil lsp-mode will watch the files in the workspace if the server has requested that. lsp-server-trace - Request trace mode on the language server. lsp-semantic-highlighting - Enable experimental semantic highlighting support lsp-enable-imenu - If non-nil, automatically enable imenu integration when server provides textDocument/documentSymbol . lsp-signature-auto-activate - Auto activate signature when trigger char is pressed. lsp-signature-render-documentation - Include signature documentation in signature help. lsp-enable-text-document-color - Enable textDocument/documentColor when server supports it.","title":"Settings"},{"location":"page/settings/#checking-project-errors","text":"To see all error statistics in the modeline you can enable lsp-diagnostics-modeline-mode . This is especially useful for languages that compilation might be broken due to errors in other files(e.g. Java/Haskell). ( with-eval-after-load 'lsp-mode ;; :project/:workspace/:file ( setq lsp-diagnostics-modeline-scope :project ) ( add-hook 'lsp-managed-mode-hook 'lsp-diagnostics-modeline-mode )) Tip: To find out the global errors you might use lsp-treemacs-errors-list .","title":"Checking project errors"},{"location":"page/settings/#code-actions-on-modeline","text":"For a UI feedback of the available code actions, you can enable lsp-modeline-code-actions-mode which shows available code actions on modeline:","title":"Code actions on modeline"},{"location":"page/settings/#breadcrumb-on-headerline","text":"For a UI feedback on headerline of the document symbol at point, you can enable lsp-headerline-breadcrumb-mode which shows a breadcrumb on top of window:","title":"Breadcrumb on headerline"},{"location":"page/settings/#limitations","text":"","title":"Limitations"},{"location":"page/settings/#file-watches","text":"When some of the workspaces that are active in the current project requests file notifications via workspace/didChangeWatchedFiles , lsp-mode will start monitoring each of the folders in the workspace for changes. In case your project contains a lot of files you might want to disable file monitoring via lsp-enable-file-watchers (you may use dir-locals).","title":"File watches"},{"location":"page/troubleshooting/","text":"Troubleshooting # Check *lsp-log* buffer and verify that lsp-mode is able to find the server. If lsp-mode is unable to find the binary but it is on the path it is probably caused by the fact that emacs is running with different path. You may check the current path by executing M-: (getenv \"PATH\") . If this is the case, you have several options to fix the issue. make sure that emacs is using the proper path by running emacs from terminal. Modify the path using setpath . Look for lsp-mode variable to customize server path. Usually, you may find the variable by doing: M-x customize-group RET lsp-LANGUAGE-SERVER-ID . Set lsp-log-io to t to inspect communication between client and the server. Use lsp-workspace-show-log to switch to the corresponding log buffer. lsp-describe-session will show the current projects roots + the started severs and allows inspecting the server capabilities:","title":"Troubleshooting"},{"location":"page/troubleshooting/#troubleshooting","text":"Check *lsp-log* buffer and verify that lsp-mode is able to find the server. If lsp-mode is unable to find the binary but it is on the path it is probably caused by the fact that emacs is running with different path. You may check the current path by executing M-: (getenv \"PATH\") . If this is the case, you have several options to fix the issue. make sure that emacs is using the proper path by running emacs from terminal. Modify the path using setpath . Look for lsp-mode variable to customize server path. Usually, you may find the variable by doing: M-x customize-group RET lsp-LANGUAGE-SERVER-ID . Set lsp-log-io to t to inspect communication between client and the server. Use lsp-workspace-show-log to switch to the corresponding log buffer. lsp-describe-session will show the current projects roots + the started severs and allows inspecting the server capabilities:","title":"Troubleshooting"},{"location":"template/lsp-client-var/","text":"{{name}} # Default: {{default}} {{documentation}}","title":"Lsp client var"},{"location":"template/lsp-client-var/#name","text":"Default: {{default}} {{documentation}}","title":"{{name}}"},{"location":"template/lsp-client/","text":"{{full-name}} # Server # For information about the LSP server, check the {{server-name}} . Installation # {{installation}}{{installation-url}} Debugger: {{debugger}} # Available configurations #","title":"Lsp client"},{"location":"template/lsp-client/#full-name","text":"","title":"{{full-name}}"},{"location":"template/lsp-client/#server","text":"For information about the LSP server, check the {{server-name}} .","title":"Server"},{"location":"template/lsp-client/#installation","text":"{{installation}}{{installation-url}}","title":"Installation"},{"location":"template/lsp-client/#debugger-debugger","text":"","title":"Debugger: {{debugger}}"},{"location":"template/lsp-client/#available-configurations","text":"","title":"Available configurations"}]}